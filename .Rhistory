runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shp_Bairros_alfab <- readRDS('Dados/shp_Bairros_alfab.rds')
shp_Bairros_alfab
sf::st_write(shp_Bairros_alfab,'shp_Bairros_alfab.geojson')
teste<- sf::read_sf('shp_Bairros_alfab.geojson')
View(teste)
library(tidyverse)
library(echarts4r)
?column
?uiOutput
shiny::runApp()
runApp()
?echarts4rOutput
runApp()
?box
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
USArrests %>%
e_charts(UrbanPop) %>%
e_line(Assault) %>%
e_toolbox_feature(feature = c("saveAsImage"))
library(echarts4r)
USArrests |>
e_charts(UrbanPop) |>
e_line(Assault) |>
e_toolbox_feature(feature = c("saveAsImage"))
USArrests |>
e_charts(UrbanPop,renderer="svg") |>
e_line(Assault) |>
e_toolbox_feature(feature = c("saveAsImage"))
# UI logic
ui <- page_fluid(
card(
max_height = 250,
full_screen = TRUE,
card_header(
"A long, scrolling, description"
),
lorem::ipsum(paragraphs = 3, sentences = 5)
),
?value_box(
title = "I got",
value = "99 problems",
showcase = bs_icon("music-note-beamed"),
p("bslib ain't one", bs_icon("emoji-smile")),
p("hit me", bs_icon("suit-spade"))
)
)
USArrests |>
e_charts(UrbanPop,renderer="svg") |>
e_line(Assault) |>
e_toolbox_feature(feature = c("saveAsImage"))
USArrests |>
e_charts(UrbanPop,renderer="jpeg") |>
e_line(Assault) |>
e_toolbox_feature(feature = c("saveAsImage"))
USArrests |>
e_charts(UrbanPop,renderer="svg") |>
e_line(Assault) |>
e_toolbox_feature(feature = c("saveAsImage"))
USArrests |>
e_charts(UrbanPop,renderer="pdf") |>
e_line(Assault) |>
e_toolbox_feature(feature = c("saveAsImage"))
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
E
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
?echarts4r::e_chart()
mtcars |>
head() |>
tibble::rownames_to_column("model") |>
e_charts(model) |>
e_pie(carb)
box::use(
shiny[...],
bs4Dash[...],
bslib[#card,
#card_header,
value_box,
value_box_theme],
shinyjs[disable,
enable,
delay],
forcats[fct_reorder],
echarts4r[e_theme_register,
renderEcharts4r,
e_axis_formatter,
e_tooltip_pointer_formatter,
e_tooltip_choro_formatter,
e_title,
e_radar,
e_radar_opts,
e_data,
e_tooltip_item_formatter,
e_bar,
e_line,
e_effect_scatter,
e_toolbox_feature,
e_legend,
e_theme,
e_grid,
e_x_axis,
e_y_axis,
e_flip_coords,
e_charts,
e_color,
e_tooltip,
e_pie,
e_group,
e_connect_group,
e_toolbox,
e_labels,
e_chart],
waiter[...],
sf[st_drop_geometry,
#sf_use_s2,
#st_read,
],
tidyr[pivot_wider,
pivot_longer,
drop_na],
dplyr[#left_join,
#right_join,
#bind_rows,
if_else,
n,
ungroup,
mutate,
select,
filter,
summarise,
group_by,
group_by_at],
# readr[read_csv2,read_csv],
leaflet[leaflet,
leafletOptions,
renderLeaflet,
addProviderTiles,
providers,
addPolygons,
addLegend,
hideGroup,
labelOptions,
addScaleBar,
setView,
clearControls,
clearGroup,
addLabelOnlyMarkers,
addMeasure,
removeMeasure,
scaleBarOptions,
highlightOptions,
addLayersControl,
colorNumeric,
colorBin,
labelFormat,
leafletProxy,
colorFactor],
leaflet.extras[addFullscreenControl,
setMapWidgetStyle],
leafpop[popupTable],
reactable[reactable,
colDef,
renderReactable],
htmltools[div],
mapmisc[colourScale],
writexl[write_xlsx],
D3plusR[d3plus,
d3plusSize,
d3plusUi,
d3plusColor,
d3plusDepth,
d3plusLabels,
d3plusTitle,
renderD3plus,
d3plusFont],
datamods[select_group_server]
)
mtcars |>
head() |>
tibble::rownames_to_column("model") |>
e_charts(model) |>
e_pie(carb)
mtcars |>
head() |>
tibble::rownames_to_column("model") |>
e_charts(model) |>
e_pie(carb) |>
e_grid(left=5)
mtcars |>
head() |>
tibble::rownames_to_column("model") |>
e_charts(model) |>
e_pie(carb) |>
e_grid(left='5%')
mtcars |>
head() |>
tibble::rownames_to_column("model") |>
e_charts(model) |>
e_pie(carb) |>
e_grid(left='15%')
mtcars |>
head() |>
tibble::rownames_to_column("model") |>
e_charts(model) |>
e_pie(carb) |>
e_grid(left='15%')
mtcars |>
head() |>
tibble::rownames_to_column("model") |>
e_charts(model) |>
e_pie(carb) |>
e_grid(left='35%')
mtcars |>
head() |>
tibble::rownames_to_column("model") |>
e_charts(model) |>
e_pie(carb) |>
e_grid(left='-35%')
mtcars |>
head() |>
tibble::rownames_to_column("model") |>
e_charts(model) |>
e_pie(carb) |>
e_grid(top='-35%')
?e_grid
mtcars |>
head() |>
tibble::rownames_to_column("model") |>
e_charts(model) |>
e_pie(carb) |>
e_grid(height = "40%")
mtcars |>
head() |>
tibble::rownames_to_column("model") |>
e_charts(model) |>
e_pie(carb,grid=list(height = "40%"))
mtcars |>
head() |>
tibble::rownames_to_column("model") |>
e_charts(model) |>
e_pie(carb,grid=list(left = "40%"))
mtcars |>
head() |>
tibble::rownames_to_column("model") |>
e_charts(model) |>
e_pie(carb,right: "21%")
mtcars |>
head() |>
tibble::rownames_to_column("model") |>
e_charts(model) |>
e_pie(carb,right= "21%")
mtcars |>
head() |>
tibble::rownames_to_column("model") |>
e_charts(model) |>
e_pie(carb,right= "20%")
runApp()
runApp()
df_pnadc
box::use(
shiny[...],
bs4Dash[...],
bslib[#card,
#card_header,
value_box,
value_box_theme],
shinyjs[disable,
enable,
delay],
forcats[fct_reorder],
echarts4r[e_theme_register,
renderEcharts4r,
e_axis_formatter,
e_tooltip_pointer_formatter,
e_tooltip_choro_formatter,
e_title,
e_radar,
e_radar_opts,
e_data,
e_tooltip_item_formatter,
e_bar,
e_line,
e_effect_scatter,
e_toolbox_feature,
e_legend,
e_theme,
e_grid,
e_x_axis,
e_y_axis,
e_flip_coords,
e_charts,
e_color,
e_tooltip,
e_pie,
e_group,
e_connect_group,
e_toolbox,
e_labels,
e_chart],
waiter[...],
sf[st_drop_geometry,
#sf_use_s2,
#st_read,
],
tidyr[pivot_wider,
pivot_longer,
drop_na],
dplyr[#left_join,
#right_join,
#bind_rows,
if_else,
n,
ungroup,
mutate,
select,
filter,
summarise,
group_by,
group_by_at],
# readr[read_csv2,read_csv],
leaflet[leaflet,
leafletOptions,
renderLeaflet,
addProviderTiles,
providers,
addPolygons,
addLegend,
hideGroup,
labelOptions,
addScaleBar,
setView,
clearControls,
clearGroup,
addLabelOnlyMarkers,
addMeasure,
removeMeasure,
scaleBarOptions,
highlightOptions,
addLayersControl,
colorNumeric,
colorBin,
labelFormat,
leafletProxy,
colorFactor],
leaflet.extras[addFullscreenControl,
setMapWidgetStyle],
leafpop[popupTable],
reactable[reactable,
colDef,
renderReactable],
htmltools[div],
mapmisc[colourScale],
writexl[write_xlsx],
D3plusR[d3plus,
d3plusSize,
d3plusUi,
d3plusColor,
d3plusDepth,
d3plusLabels,
d3plusTitle,
renderD3plus,
d3plusFont],
datamods[select_group_server]
)
df_pnadc <- readRDS('Dados/pnadc_12_23_df_cnae.rds')
rend <-  df_pnadc |>
filter(Ano == input$Ano_filter) |>
group_by(`Grupos ocupacionais`,V2007) |>
summarise(Rendimento = weighted.mean(VD4019*CO2,w = V1032,na.rm =TRUE)) |>
mutate(Rendimento = round(Rendimento,2)) |>
pivot_wider(names_from = V2007, values_from =Rendimento ) |>
select(1,3,2) |>
drop_na()
rend <-  df_pnadc |>
filter(Ano == 2023) |>
group_by(`Grupos ocupacionais`,V2007) |>
summarise(Rendimento = weighted.mean(VD4019*CO2,w = V1032,na.rm =TRUE)) |>
mutate(Rendimento = round(Rendimento,2)) |>
pivot_wider(names_from = V2007, values_from =Rendimento ) |>
select(1,3,2) |>
drop_na()
rend |>
reactable(bordered = TRUE,compact = T,defaultPageSize = 15,
highlight = TRUE,
defaultColDef = colDef(
style = list(fontSize = 14,headerClass = "sort-header"
)#headerClass = "sort-header",
),
columns = list(
Homem = colDef(name = "Homens (R$)", align = "left", # width = 200,
cell = function(value) {
width <- paste0(value / max(rend$Homem) * 100,'%')
value <- format(value,big.mark = ".",decimal.mark=",")
value <- format(value, width = 9, justify = "right")
bar_chart(value, width = width,background = "#e1e1e1",fill = cor_h)
}, style = list(fontFamily = "monospace", whiteSpace = "pre")),
Mulher = colDef(name = "Mulheres (R$)", align = "left", # width = 200,
cell = function(value) {
width <- paste0(value / max(rend$Homem) * 100,'%')
value <- format(value,big.mark = ".",decimal.mark=",")
value <- format(value, width = 9, justify = "right")
bar_chart(value, width = width,background = "#e1e1e1",fill =cor_m)
}, style = list(fontFamily = "monospace", whiteSpace = "pre"))
)
)
bar_chart <- function(label, width = "100%", height = "1rem", fill = "#00bfc4", background = NULL) {
bar <- div(style = list(background = fill, width = width, height = height))
chart <- div(style = list(flexGrow = 1, marginLeft = "0.375rem", background = background), bar)
div(style = list(display = "flex", alignItems = "center"), label, chart)
}
rend |>
reactable(bordered = TRUE,compact = T,defaultPageSize = 15,
highlight = TRUE,
defaultColDef = colDef(
style = list(fontSize = 14,headerClass = "sort-header"
)#headerClass = "sort-header",
),
columns = list(
Homem = colDef(name = "Homens (R$)", align = "left", # width = 200,
cell = function(value) {
width <- paste0(value / max(rend$Homem) * 100,'%')
value <- format(value,big.mark = ".",decimal.mark=",")
value <- format(value, width = 9, justify = "right")
bar_chart(value, width = width,background = "#e1e1e1",fill = cor_h)
}, style = list(fontFamily = "monospace", whiteSpace = "pre")),
Mulher = colDef(name = "Mulheres (R$)", align = "left", # width = 200,
cell = function(value) {
width <- paste0(value / max(rend$Homem) * 100,'%')
value <- format(value,big.mark = ".",decimal.mark=",")
value <- format(value, width = 9, justify = "right")
bar_chart(value, width = width,background = "#e1e1e1",fill =cor_m)
}, style = list(fontFamily = "monospace", whiteSpace = "pre"))
)
)
cor_h = '#6963A5'
cor_m = '#C2ACFF'
cor_g = '#F96335'
rend <-  df_pnadc |>
filter(Ano == 2023) |>
group_by(`Grupos ocupacionais`,V2007) |>
summarise(Rendimento = weighted.mean(VD4019*CO2,w = V1032,na.rm =TRUE)) |>
mutate(Rendimento = round(Rendimento,2)) |>
pivot_wider(names_from = V2007, values_from =Rendimento ) |>
select(1,3,2) |>
drop_na()
rend |>
reactable(bordered = TRUE,compact = T,defaultPageSize = 15,
highlight = TRUE,
defaultColDef = colDef(
style = list(fontSize = 14,headerClass = "sort-header"
)#headerClass = "sort-header",
),
columns = list(
Homem = colDef(name = "Homens (R$)", align = "left", # width = 200,
cell = function(value) {
width <- paste0(value / max(rend$Homem) * 100,'%')
value <- format(value,big.mark = ".",decimal.mark=",")
value <- format(value, width = 9, justify = "right")
bar_chart(value, width = width,background = "#e1e1e1",fill = cor_h)
}, style = list(fontFamily = "monospace", whiteSpace = "pre")),
Mulher = colDef(name = "Mulheres (R$)", align = "left", # width = 200,
cell = function(value) {
width <- paste0(value / max(rend$Homem) * 100,'%')
value <- format(value,big.mark = ".",decimal.mark=",")
value <- format(value, width = 9, justify = "right")
bar_chart(value, width = width,background = "#e1e1e1",fill =cor_m)
}, style = list(fontFamily = "monospace", whiteSpace = "pre"))
)
)
filter(Ano == 2023) |>
filter(Ano == 2023) |>
rend <-  df_pnadc |>
filter(Ano == 2023) |>
group_by(`Grupos ocupacionais`,V2007) |>
summarise(Rendimento = weighted.mean(VD4019*CO2,w = V1032,na.rm =TRUE),
Qtd = round(sum(V1032))) |>
mutate(Rendimento = round(Rendimento,2)) |>
pivot_wider(names_from = V2007, values_from =Rendimento ) |>
select(1,3,2) |>
drop_na()
rend
df_pnadc |>
filter(Ano == 2023) |>
group_by(`Grupos ocupacionais`,V2007) |>
summarise(Rendimento = weighted.mean(VD4019*CO2,w = V1032,na.rm =TRUE),
Qtd = round(sum(V1032)))
