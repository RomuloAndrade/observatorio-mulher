# cell = function(value) {
#   width <- paste0(value / max(rend$Rendimento_Homem) * 100,'%')
#   value <- format(value,big.mark = ".",decimal.mark=",")
#   value <- paste0('R$ ', format(value, width = 9, justify = "right"))
#   bar_chart(value, width = width,background = "#e1e1e1",fill = cor_m)
# },
cell = data_bars(rend,
fill_color = cor_m,
text_position = "outside-base",
number_fmt =
scales::number_format(prefix='f',accuracy  = 0.01, big.mark = ".",decimal.mark=",") ),
style = list(fontFamily = "monospace", whiteSpace = "pre")),
Qtd_Homem = colDef(name = "Homens", align = "left", # width = 200,
cell = function(value) {
width <- paste0(value / max(rend$Qtd_Homem) * 100,'%')
value <- format(value,big.mark = ".",decimal.mark=",")
value <- format(value, width = 9, justify = "right")
bar_chart(value, width = width,background = "#e1e1e1",fill = cor_h)
}, style = list(fontFamily = "monospace", whiteSpace = "pre")),
Qtd_Mulher = colDef(name = "Mulheres", align = "left", # width = 200,
cell = function(value) {
width <- paste0(value / max(rend$Qtd_Mulher) * 100,'%')
value <- format(value,big.mark = ".",decimal.mark=",")
value <- format(value, width = 9, justify = "right")
bar_chart(value, width = width,background = "#e1e1e1",fill = cor_h)
}, style = list(fontFamily = "monospace", whiteSpace = "pre"))
),
columnGroups = list(
colGroup(name = "Rendimento médio", columns = c("Rendimento_Homem", "Rendimento_Mulher")),
colGroup(name = "Quantidade", columns = c("Qtd_Homem", "Qtd_Mulher"))
),
)
rend |>
reactable(bordered = F,compact = T,defaultPageSize = 15,
highlight = TRUE,
defaultColDef = colDef(
style = list(fontSize = 14,headerClass = "sort-header"
)#headerClass = "sort-header",
),
columns = list(
`Grupos ocupacionais` = colDef(width = 500),
Rendimento_Homem = colDef(name = "Homens", align = "left", # width = 200,
cell = function(value) {
width <- paste0(value / max(rend$Rendimento_Homem) * 100,'%')
value <- format(value,big.mark = ".",decimal.mark=",")
value <- paste0('R$ ', format(value, width = 9, justify = "right"))
bar_chart(value, width = width,background = "#e1e1e1",fill = cor_h)
}, style = list(fontFamily = "monospace", whiteSpace = "pre")),
Rendimento_Mulher = colDef(name = "Mulheres", align = "left", # width = 200,
# cell = function(value) {
#   width <- paste0(value / max(rend$Rendimento_Homem) * 100,'%')
#   value <- format(value,big.mark = ".",decimal.mark=",")
#   value <- paste0('R$ ', format(value, width = 9, justify = "right"))
#   bar_chart(value, width = width,background = "#e1e1e1",fill = cor_m)
# },
cell = data_bars(rend,
fill_color = cor_m,
text_position = "outside-base",
number_fmt =
scales::number_format(prefix='f ',accuracy  = 0.01, big.mark = ".",decimal.mark=",") ),
style = list(fontFamily = "monospace", whiteSpace = "pre")),
Qtd_Homem = colDef(name = "Homens", align = "left", # width = 200,
cell = function(value) {
width <- paste0(value / max(rend$Qtd_Homem) * 100,'%')
value <- format(value,big.mark = ".",decimal.mark=",")
value <- format(value, width = 9, justify = "right")
bar_chart(value, width = width,background = "#e1e1e1",fill = cor_h)
}, style = list(fontFamily = "monospace", whiteSpace = "pre")),
Qtd_Mulher = colDef(name = "Mulheres", align = "left", # width = 200,
cell = function(value) {
width <- paste0(value / max(rend$Qtd_Mulher) * 100,'%')
value <- format(value,big.mark = ".",decimal.mark=",")
value <- format(value, width = 9, justify = "right")
bar_chart(value, width = width,background = "#e1e1e1",fill = cor_h)
}, style = list(fontFamily = "monospace", whiteSpace = "pre"))
),
columnGroups = list(
colGroup(name = "Rendimento médio", columns = c("Rendimento_Homem", "Rendimento_Mulher")),
colGroup(name = "Quantidade", columns = c("Qtd_Homem", "Qtd_Mulher"))
),
)
rend |>
reactable(bordered = F,compact = T,defaultPageSize = 15,
highlight = TRUE,
defaultColDef = colDef(
style = list(fontSize = 14,headerClass = "sort-header"
)#headerClass = "sort-header",
),
columns = list(
`Grupos ocupacionais` = colDef(width = 500),
Rendimento_Homem = colDef(name = "Homens", align = "left", # width = 200,
cell = function(value) {
width <- paste0(value / max(rend$Rendimento_Homem) * 100,'%')
value <- format(value,big.mark = ".",decimal.mark=",")
value <- paste0('R$ ', format(value, width = 9, justify = "right"))
bar_chart(value, width = width,background = "#e1e1e1",fill = cor_h)
}, style = list(fontFamily = "monospace", whiteSpace = "pre")),
Rendimento_Mulher = colDef(name = "Mulheres", align = "left", # width = 200,
cell = function(value) {
width <- paste0(value / max(rend$Rendimento_Homem) * 100,'%')
value <- format(value,big.mark = ".",decimal.mark=",")
value <- paste0('R$ ', format(value, width = 9, justify = "right"))
bar_chart(value, width = width,background = "#e1e1e1",fill = cor_m)
},
style = list(fontFamily = "monospace", whiteSpace = "pre")),
Qtd_Homem = colDef(name = "Homens", align = "left", # width = 200,
cell = function(value) {
width <- paste0(value / max(rend$Qtd_Homem) * 100,'%')
value <- format(value,big.mark = ".",decimal.mark=",")
value <- format(value, width = 9, justify = "right")
bar_chart(value, width = width,background = "#e1e1e1",fill = cor_h)
}, style = list(fontFamily = "monospace", whiteSpace = "pre")),
Qtd_Mulher = colDef(name = "Mulheres", align = "left", # width = 200,
cell = function(value) {
width <- paste0(value / max(rend$Qtd_Mulher) * 100,'%')
value <- format(value,big.mark = ".",decimal.mark=",")
value <- format(value, width = 9, justify = "right")
bar_chart(value, width = width,background = "#e1e1e1",fill = cor_h)
}, style = list(fontFamily = "monospace", whiteSpace = "pre"))
),
columnGroups = list(
colGroup(name = "Rendimento médio", columns = c("Rendimento_Homem", "Rendimento_Mulher")),
colGroup(name = "Quantidade", columns = c("Qtd_Homem", "Qtd_Mulher"))
),
)
rend |>
reactable(bordered = F,compact = T,defaultPageSize = 15,
highlight = TRUE,
defaultColDef = colDef(
style = list(fontSize = 14,headerClass = "sort-header"
)#headerClass = "sort-header",
),
columns = list(
`Grupos ocupacionais` = colDef(width = 500),
Rendimento_Homem = colDef(name = "Homens", align = "left", # width = 200,
cell = function(value) {
width <- paste0(value / max(rend$Rendimento_Homem) * 100,'%')
value <- format(value,big.mark = ".",decimal.mark=",")
value <- paste0('R$ ', format(value, width = 9, justify = "right"))
bar_chart(value, width = width,background = "#e1e1e1",fill = cor_h)
}, style = list(fontFamily = "monospace", whiteSpace = "pre")),
Rendimento_Mulher = colDef(name = "Mulheres", align = "left", # width = 200,
cell = function(value) {
width <- paste0(value / max(rend$Rendimento_Homem) * 100,'%')
value <- format(value,big.mark = ".",decimal.mark=",")
value <- paste0('R$ ', format(value, width = 9, justify = "right"))
bar_chart(value, width = width,background = "#e1e1e1",fill = cor_m)
},
style = list(fontFamily = "monospace", whiteSpace = "pre")),
Qtd_Homem = colDef(name = "Homens", align = "left", # width = 200,
cell = function(value) {
width <- paste0(value / max(rend$Qtd_Mulher) * 100,'%')
value <- format(value,big.mark = ".",decimal.mark=",")
value <- format(value, width = 9, justify = "right")
bar_chart(value, width = width,background = "#e1e1e1",fill = cor_h)
}, style = list(fontFamily = "monospace", whiteSpace = "pre")),
Qtd_Mulher = colDef(name = "Mulheres", align = "left", # width = 200,
cell = function(value) {
width <- paste0(value / max(rend$Qtd_Mulher) * 100,'%')
value <- format(value,big.mark = ".",decimal.mark=",")
value <- format(value, width = 9, justify = "right")
bar_chart(value, width = width,background = "#e1e1e1",fill = cor_h)
}, style = list(fontFamily = "monospace", whiteSpace = "pre"))
),
columnGroups = list(
colGroup(name = "Rendimento médio", columns = c("Rendimento_Homem", "Rendimento_Mulher")),
colGroup(name = "Quantidade", columns = c("Qtd_Homem", "Qtd_Mulher"))
),
)
runApp()
runApp()
shp_Bairros <- readRDS('Dados/shp_bairros_demografia.rds')
bairros_demografia <- readRDS('Dados/bairros_demografia.rds')
runApp()
# Load data -----------------------------------------------------------------------------------
lista_demog <- readRDS('Dados/lista_demog.rds')
lista_demog['FORTALEZA']
lista_demog
lista_demog[lista_demog=='FORTALEZA']
lista_demog[lista_demog=='FORTALEZA'] <- 'Fortaleza'
lista_demog[lista_demog=='FORTALEZA']
lista_demog[lista_demog=='Fortaleza'] <- 'Fortaleza'
lista_demog[lista_demog=='Fortaleza']
lista_demog
saveRDS(lista_demog,'Dados/lista_demog.rds')
runApp()
runApp()
shp_Bairros <- readRDS('Dados/shp_bairros_demografia.rds')
df_sexo <- readRDS('Dados/df_sexo.rds')
View(df_sexo)
df_sexo <- df_sexo |>
dplyr::mutate(NM_BAIRRO=dplyr::if_else(NM_BAIRRO=='FORTALEZA','Fortaleza',NM_BAIRRO))
saveRDS(df_sexo,'Dados/df_sexo.rds')
View(df_sexo)
runApp()
df_faixa <- readRDS('Dados/df_faixa_.rds')
df_faixa
View(df_faixa)
df_faixa <- df_faixa |>
dplyr::mutate(NM_BAIRRO=dplyr::if_else(NM_BAIRRO=='FORTALEZA','Fortaleza',NM_BAIRRO))
saveRDS(df_faixa,'Dados/df_faixa.rds')
View(df_faixa)
runApp()
View(df_faixa)
df_faixa <- readRDS('Dados/df_faixa_.rds')
View(df_faixa)
df_faixa <- readRDS('Dados/df_faixa_.rds')
View(df_faixa)
View(df_faixa)
df_faixa <- df_faixa |>
dplyr::mutate(NM_BAIRRO=dplyr::if_else(NM_BAIRRO=='FORTALEZA','Fortaleza',NM_BAIRRO))
saveRDS(df_faixa,'Dados/df_faixa.rds')
runApp()
df_faixa <- readRDS('Dados/df_faixa_.rds')
View(df_faixa)
df_faixa <- readRDS('Dados/df_faixa_.rds')
View(df_faixa)
df_faixa <- df_faixa |>
dplyr::mutate(NM_BAIRRO=dplyr::if_else(NM_BAIRRO=='FORTALEZA','Fortaleza',NM_BAIRRO))
saveRDS(df_faixa,'Dados/df_faixa_.rds')
runApp()
runApp()
?box
runApp()
runApp()
shiny::runApp()
runApp()
library(shiny)
library(ggplot2)
ui <- page_fillable(
h1("Example", code("mtcars"), "dashboard"),
layout_columns(
card(
full_screen = TRUE,
card_header("Number of forward gears"),
plotOutput("gear")
),
card(
full_screen = TRUE,
card_header("Number of carburetors"),
plotOutput("carb")
)
),
card(
full_screen = TRUE,
card_header("Weight vs. Quarter Mile Time"),
layout_sidebar(
sidebar = sidebar(
varSelectInput("var_x", "Compare to qsec:", mtcars[-7], "wt"),
varSelectInput("color", "Color by:", mtcars[-7], "cyl"),
position = "right"
),
plotOutput("var_vs_qsec")
)
)
)
library(bslib)
ui <- page_fillable(
h1("Example", code("mtcars"), "dashboard"),
layout_columns(
card(
full_screen = TRUE,
card_header("Number of forward gears"),
plotOutput("gear")
),
card(
full_screen = TRUE,
card_header("Number of carburetors"),
plotOutput("carb")
)
),
card(
full_screen = TRUE,
card_header("Weight vs. Quarter Mile Time"),
layout_sidebar(
sidebar = sidebar(
varSelectInput("var_x", "Compare to qsec:", mtcars[-7], "wt"),
varSelectInput("color", "Color by:", mtcars[-7], "cyl"),
position = "right"
),
plotOutput("var_vs_qsec")
)
)
)
server <- function(input, output) {
for (var in c("cyl", "vs", "am", "gear", "carb")) {
mtcars[[var]] <- as.factor(mtcars[[var]])
}
output$gear <- renderPlot({
ggplot(mtcars, aes(gear)) + geom_bar()
})
output$carb <- renderPlot({
ggplot(mtcars, aes(carb)) + geom_bar()
})
output$var_vs_qsec <- renderPlot({
req(input$var_x, input$color)
ggplot(mtcars) +
aes(y = qsec, x = !!input$var_x, color = !!input$color) +
geom_point()
})
}
shinyApp(ui, server)
12*381.97
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
ui <- page_navbar(
title = "Exemplo bslib",
nav_panel("Página 1", h2("Conteúdo da Página 1")),
nav_panel("Página 2", h2("Conteúdo da Página 2"))
)
library(shiny)
library(bslib)
ui <- page_navbar(
title = "Exemplo bslib",
nav_panel("Página 1", h2("Conteúdo da Página 1")),
nav_panel("Página 2", h2("Conteúdo da Página 2"))
)
server <- function(input, output, session) {}
shinyApp(ui, server)
renv::deactivate()
w
renv::status()
renv::snapshot()
renv::snapshot()
renv::status()
shiny::runApp()
runApp()
renv::deactivate()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
renv::snapshot()
renv::status()
{
# https://shiny.posit.co/blog/posts/bslib-dashboards/#why-bslib-themable-dashboards
#
# Note: this is the same app as `01-hello-dashboards.R` but with `bs_themer()`
# turned on in the server function.
library(shiny)
library(bslib)
library(ggplot2)
# Setup -------------------------------------------------------------------
data(penguins, package = "palmerpenguins")
# Turn on thematic for theme-matched plots
thematic::thematic_shiny(font = "auto")
theme_set(theme_bw(base_size = 16))
# Calculate column means for the value boxes
means <- colMeans(
penguins[c("bill_length_mm", "bill_length_mm", "body_mass_g")],
na.rm = TRUE
)
# UI ----------------------------------------------------------------------
ui <- page_sidebar(
title = "Penguins dashboard",
sidebar = sidebar(
varSelectInput(
"color_by", "Color by",
penguins[c("species", "island", "sex")],
selected = "species"
)
),
layout_columns(
fill = FALSE,
value_box(
title = "Average bill length",
value = scales::unit_format(unit = "mm")(means[[1]]),
showcase = bsicons::bs_icon("align-bottom")
),
value_box(
title = "Average bill depth",
value = scales::unit_format(unit = "mm")(means[[2]]),
showcase = bsicons::bs_icon("align-center"),
theme_color = "dark"
),
value_box(
title = "Average body mass",
value = scales::unit_format(unit = "g", big.mark = ",")(means[[3]]),
showcase = bsicons::bs_icon("handbag"),
theme_color = "secondary"
)
),
layout_columns(
card(
full_screen = TRUE,
card_header("Bill Length"),
plotOutput("bill_length")
),
card(
full_screen = TRUE,
card_header("Bill depth"),
plotOutput("bill_depth")
)
),
card(
full_screen = TRUE,
card_header("Body Mass"),
plotOutput("body_mass")
)
)
# Server ------------------------------------------------------------------
server <- function(input, output) {
bs_themer()
gg_plot <- reactive({
ggplot(penguins) +
geom_density(aes(fill = !!input$color_by), alpha = 0.2) +
theme_bw(base_size = 16) +
theme(axis.title = element_blank())
})
output$bill_length <- renderPlot(gg_plot() + aes(bill_length_mm))
output$bill_depth <- renderPlot(gg_plot() + aes(bill_depth_mm))
output$body_mass <- renderPlot(gg_plot() + aes(body_mass_g))
}
# Shiny App ---------------------------------------------------------------
shinyApp(ui, server)
}
renv::deactivate()
{
# https://shiny.posit.co/blog/posts/bslib-dashboards/#why-bslib-themable-dashboards
#
# Note: this is the same app as `01-hello-dashboards.R` but with `bs_themer()`
# turned on in the server function.
library(shiny)
library(bslib)
library(ggplot2)
# Setup -------------------------------------------------------------------
data(penguins, package = "palmerpenguins")
# Turn on thematic for theme-matched plots
thematic::thematic_shiny(font = "auto")
theme_set(theme_bw(base_size = 16))
# Calculate column means for the value boxes
means <- colMeans(
penguins[c("bill_length_mm", "bill_length_mm", "body_mass_g")],
na.rm = TRUE
)
# UI ----------------------------------------------------------------------
ui <- page_sidebar(
title = "Penguins dashboard",
sidebar = sidebar(
varSelectInput(
"color_by", "Color by",
penguins[c("species", "island", "sex")],
selected = "species"
)
),
layout_columns(
fill = FALSE,
value_box(
title = "Average bill length",
value = scales::unit_format(unit = "mm")(means[[1]]),
showcase = bsicons::bs_icon("align-bottom")
),
value_box(
title = "Average bill depth",
value = scales::unit_format(unit = "mm")(means[[2]]),
showcase = bsicons::bs_icon("align-center"),
theme_color = "dark"
),
value_box(
title = "Average body mass",
value = scales::unit_format(unit = "g", big.mark = ",")(means[[3]]),
showcase = bsicons::bs_icon("handbag"),
theme_color = "secondary"
)
),
layout_columns(
card(
full_screen = TRUE,
card_header("Bill Length"),
plotOutput("bill_length")
),
card(
full_screen = TRUE,
card_header("Bill depth"),
plotOutput("bill_depth")
)
),
card(
full_screen = TRUE,
card_header("Body Mass"),
plotOutput("body_mass")
)
)
# Server ------------------------------------------------------------------
server <- function(input, output) {
bs_themer()
gg_plot <- reactive({
ggplot(penguins) +
geom_density(aes(fill = !!input$color_by), alpha = 0.2) +
theme_bw(base_size = 16) +
theme(axis.title = element_blank())
})
output$bill_length <- renderPlot(gg_plot() + aes(bill_length_mm))
output$bill_depth <- renderPlot(gg_plot() + aes(bill_depth_mm))
output$body_mass <- renderPlot(gg_plot() + aes(body_mass_g))
}
# Shiny App ---------------------------------------------------------------
shinyApp(ui, server)
}
shiny::runApp()
?layout_column_wrap
runApp()
renv::restore()
shiny::runApp()
Tx_faixa_alfab <- readRDS('Dados/Tx_faixa_alfab.rds')
Tx_faixa_alfab
Qtd_alfab <- readRDS('Dados/Qtd_alfab.rds')
Qtd_alfab
