shp_Bairros_alfab <- readRDS('Dados/shp_Bairros_alfab.rds')
shp_Bairros_alfab
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?reactiveValues
runApp()
runApp()
runApp()
runApp()
runApp()
View(Tx_faixa_)
runApp()
runApp()
?disable
?disable
box::use(
shiny[...],
bs4Dash[...],
forcats[fct_reorder],
echarts4r[e_theme_register,
renderEcharts4r,
e_axis_formatter,
e_tooltip_pointer_formatter,
e_tooltip_choro_formatter,
e_title,
e_radar,
e_radar_opts,
e_data,
e_tooltip_item_formatter,
e_bar,
e_line,
e_effect_scatter,
e_toolbox_feature,
e_legend,
e_theme,
e_grid,
e_x_axis,
e_y_axis,
e_flip_coords,
e_charts,
e_color,
e_tooltip,
e_pie,
e_group,
e_connect_group,
e_toolbox,
e_labels,
e_chart],
waiter[...],
sf[st_drop_geometry,
#sf_use_s2,
#st_read,
],
tidyr[pivot_wider,pivot_longer],
dplyr[#left_join,
#right_join,
#bind_rows,
#  arrange,
n,
ungroup,
mutate,
#rename,
select,
filter,
summarise,
group_by],
# readr[read_csv2,read_csv],
leaflet[leaflet,
leafletOptions,
renderLeaflet,
addProviderTiles,
providers,
addPolygons,
addLegend,
hideGroup,
labelOptions,
addScaleBar,
setView,
clearControls,
clearGroup,
addLabelOnlyMarkers,
addMeasure,
removeMeasure,
scaleBarOptions,
highlightOptions,
addLayersControl,
colorNumeric,
colorBin,
labelFormat,
leafletProxy,
colorFactor],
leaflet.extras[addFullscreenControl,
setMapWidgetStyle],
leafpop[popupTable],
reactable[reactable,
colDef,
renderReactable],
htmltools[div],
mapmisc[colourScale],
writexl[write_xlsx],
D3plusR[d3plus,
d3plusSize,
d3plusUi,
d3plusColor,
d3plusDepth,
d3plusLabels,
d3plusTitle,
renderD3plus],
datamods[select_group_server]
)
?disable
box::use(
shiny[...],
bs4Dash[...],
shinyjs[disable,
enable]
forcats[fct_reorder],
box::use(
shiny[...],
bs4Dash[...],
shinyjs[disable,
enable],
forcats[fct_reorder],
echarts4r[e_theme_register,
renderEcharts4r,
e_axis_formatter,
e_tooltip_pointer_formatter,
e_tooltip_choro_formatter,
e_title,
e_radar,
e_radar_opts,
e_data,
e_tooltip_item_formatter,
e_bar,
e_line,
e_effect_scatter,
e_toolbox_feature,
e_legend,
e_theme,
e_grid,
e_x_axis,
e_y_axis,
e_flip_coords,
e_charts,
e_color,
e_tooltip,
e_pie,
e_group,
e_connect_group,
e_toolbox,
e_labels,
e_chart],
waiter[...],
sf[st_drop_geometry,
#sf_use_s2,
#st_read,
],
tidyr[pivot_wider,pivot_longer],
dplyr[#left_join,
#right_join,
#bind_rows,
#  arrange,
n,
ungroup,
mutate,
#rename,
select,
filter,
summarise,
group_by],
# readr[read_csv2,read_csv],
leaflet[leaflet,
leafletOptions,
renderLeaflet,
addProviderTiles,
providers,
addPolygons,
addLegend,
hideGroup,
labelOptions,
addScaleBar,
setView,
clearControls,
clearGroup,
addLabelOnlyMarkers,
addMeasure,
removeMeasure,
scaleBarOptions,
highlightOptions,
addLayersControl,
colorNumeric,
colorBin,
labelFormat,
leafletProxy,
colorFactor],
leaflet.extras[addFullscreenControl,
setMapWidgetStyle],
leafpop[popupTable],
reactable[reactable,
colDef,
renderReactable],
htmltools[div],
mapmisc[colourScale],
writexl[write_xlsx],
D3plusR[d3plus,
d3plusSize,
d3plusUi,
d3plusColor,
d3plusDepth,
d3plusLabels,
d3plusTitle,
renderD3plus],
datamods[select_group_server]
)
?disable
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?menuItem
runApp()
bairros_alfab <- readRDS('Dados/tx_bairros_alfab.rds')
bairros_alfab
Qtd_alfab <- readRDS('Dados/Qtd_alfab.rds')
Tx_faixa_alfab
Tx_faixa_alfab <- readRDS('Dados/Tx_faixa_alfab.rds')
shp_Bairros_alfab <- readRDS('Dados/shp_Bairros_alfab.rds')
f = 359.81
p = 636.49
f+p
f+4*p
f = 358.06
p = 601.59
f+4*p
f = 358.06
p = 601.59
f+4*p
0.02*6.15
runApp()
?select_group_ui
runApp()
library(shinyWidgets)
ui <- fluidPage(
select_group_ui(
id = "my_select",
label = "Escolha uma opção:",
choices = list(
"Grupo 1" = c("A", "B", "C"),
"Grupo 2" = c("D", "E", "F")
),
updateOn = c("change", "close") # Atualiza ao mudar ou fechar
),
verbatimTextOutput("selected_value")
)
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
select_group_ui(
id = "my_select",
label = "Escolha uma opção:",
choices = list(
"Grupo 1" = c("A", "B", "C"),
"Grupo 2" = c("D", "E", "F")
),
updateOn = c("change", "close") # Atualiza ao mudar ou fechar
),
verbatimTextOutput("selected_value")
)
box::use(
shiny[...],
bs4Dash[...],
shinyjs[disable,
enable,
delay],
forcats[fct_reorder],
echarts4r[e_theme_register,
renderEcharts4r,
e_axis_formatter,
e_tooltip_pointer_formatter,
e_tooltip_choro_formatter,
e_title,
e_radar,
e_radar_opts,
e_data,
e_tooltip_item_formatter,
e_bar,
e_line,
e_effect_scatter,
e_toolbox_feature,
e_legend,
e_theme,
e_grid,
e_x_axis,
e_y_axis,
e_flip_coords,
e_charts,
e_color,
e_tooltip,
e_pie,
e_group,
e_connect_group,
e_toolbox,
e_labels,
e_chart],
waiter[...],
sf[st_drop_geometry,
#sf_use_s2,
#st_read,
],
tidyr[pivot_wider,pivot_longer],
dplyr[#left_join,
#right_join,
#bind_rows,
if_else,
n,
ungroup,
mutate,
#rename,
select,
filter,
summarise,
group_by],
# readr[read_csv2,read_csv],
leaflet[leaflet,
leafletOptions,
renderLeaflet,
addProviderTiles,
providers,
addPolygons,
addLegend,
hideGroup,
labelOptions,
addScaleBar,
setView,
clearControls,
clearGroup,
addLabelOnlyMarkers,
addMeasure,
removeMeasure,
scaleBarOptions,
highlightOptions,
addLayersControl,
colorNumeric,
colorBin,
labelFormat,
leafletProxy,
colorFactor],
leaflet.extras[addFullscreenControl,
setMapWidgetStyle],
leafpop[popupTable],
reactable[reactable,
colDef,
renderReactable],
htmltools[div],
mapmisc[colourScale],
writexl[write_xlsx],
D3plusR[d3plus,
d3plusSize,
d3plusUi,
d3plusColor,
d3plusDepth,
d3plusLabels,
d3plusTitle,
renderD3plus],
datamods[select_group_server]
)
0.02*6.15
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
select_group_ui(
id = "my_select",
label = "Escolha uma opção:",
choices = list(
"Grupo 1" = c("A", "B", "C"),
"Grupo 2" = c("D", "E", "F")
),
updateOn = c("change", "close") # Atualiza ao mudar ou fechar
),
verbatimTextOutput("selected_value")
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
select_group_ui(
id = "my_select",
label = "Escolha uma opção:",
choices = list(
"Grupo 1" = c("A", "B", "C"),
"Grupo 2" = c("D", "E", "F")
),
updateOn = c("change", "close"),
showValueAsTags = FALSE  # Desativamos as tags nativas
),
# Criamos uma área para exibir os valores selecionados manualmente
uiOutput("custom_tags")
)
runApp()
val_selec=c('select')
val_selec
val_selec[2] = '2'
val_selec
val_selec[1]
val_selec[2]
runApp()
runApp()
Atividade_CNAE <- readRDS("Dados/Atividade_CNAE2.rds")
shp_Bairros <- readRDS('Dados/shp_bairros_demografia.rds')
shp_Bairros <-   shp_Bairros |>
st_drop_geometry()
writexl::write_xlsx(shp_Bairros,'shp_Bairros.xlsx')
runApp()
runApp()
runApp()
runApp()
Tipos_trab2 <- readRDS('Dados/Tipos_trab_2023.rds')
Tipos_trab2
pnadc_12_23 <- readRDS("C:/Romulo/Iplanfor/Pnadc/Pnadc_Visita_5/PNADC_12_23BR.RDS")
pnadc_12_23 <- readRDS("C:/Romulo/Iplanfor/Pnadc/Pnadc_Visita_5/pnadc12_23_fort.rds")
pnadc_12_23 <- readRDS("C:/Romulo/Iplanfor/Pnadc/Pnadc_Visita_5/PNADC_12_23BR.RDS")
pnadc_12_23 <- readRDS("C:/Romulo/Iplanfor/Pnadc/Pnadc_Visita_5/pnadc12_23_fort.rds")
Tipos_trab2
Tipos_trab2 <- readRDS('Dados/Tipos_trab_2023.rds')
Tipos_trab2
pnadc_12_23 <- readRDS('Dados/pnadc12_23_fort.rds')
pnadc_12_23 |> unique(Capital)
pnadc_12_23 |> unique('Capital')
pnadc_12_23 |> unique(pnadc_12_23$Capital)
pnadc_12_23 |> distinct(pnadc_12_23$Capital)
library(dplyr)
pnadc_12_23 |> distinct(pnadc_12_23$Capital)
pnadc_12_23 |> unique(pnadc_12_23$Capital)
unique(pnadc_12_23$Capital)
pnadc_12_23 |> distinct(Capital)
Atividade_CNAE
#Atividade_CNAE <- readRDS("C:/Romulo/Iplanfor/Pnadc/Pnadc_Visita_5/Atividade_CNAE.rds")
Atividade_CNAE <- readRDS("C:/Romulo/Iplanfor/Pnadc/Pnadc_Visita_5/Atividade_CNAE2.rds")
Atividade_CNAE
View(Atividade_CNAE)
ws <- pnadc_12_23_df |>
filter(Capital=="Município de Fortaleza (CE)")  |>
group_by(Ano,V4013,V2007,V2010,VD3004,idadeEco2) |>
summarise(Rendimento = weighted.mean(VD4019*CO2,w = V1032,na.rm =TRUE))
pnadc_12_23 <- readRDS('Dados/pnadc12_23_fort.rds')
pnadc_12_23 |> distinct(Capital)
pnadc_12_23_df <-  pnadc_deflator(pnadc_12_23,
"Dados/deflator_PNADC_2023.xls")
library(PNADcIBGE)
pnadc_12_23_df <-  pnadc_deflator(pnadc_12_23,
"Dados/deflator_PNADC_2023.xls")
ws <- pnadc_12_23_df |>
filter(Capital=="Município de Fortaleza (CE)")  |>
group_by(Ano,V4013,V2007,V2010,VD3004,idadeEco2) |>
summarise(Rendimento = weighted.mean(VD4019*CO2,w = V1032,na.rm =TRUE))
ws
pnadc_12_23_df_ <- pnadc_12_23_df |>
filter(Capital=="Município de Fortaleza (CE)",Ano,V4013,V2007,V2010,VD3004,idadeEco2)
pnadc_12_23_df_ <- pnadc_12_23_df |>
filter(Capital=="Município de Fortaleza (CE)",Ano,V4013,V2007,V2010,VD3004,idadeEco2) |>
select(Capital,Ano,V4013,V2007,V2010,VD3004,idadeEco2)
pnadc_12_23_df
pnadc_12_23_df_ <- pnadc_12_23_df |>
filter(Capital=="Município de Fortaleza (CE)") |>
select(Capital,Ano,V4013,V2007,V2010,VD3004,idadeEco2)
pnadc_12_23_df_ <- pnadc_12_23_df |>
filter(Capital=="Município de Fortaleza (CE)") |>
select(Capital,Ano,V4013,V2007,V2010,VD3004,idadeEco2)
pnadc_12_23_df_
View(pnadc_12_23_df_)
glimpsepnadc_12_23_df_
glimpse(pnadc_12_23_df_)
summarize(pnadc_12_23_df_)
summarize(pnadc_12_23_df_$V4013)
summary(pnadc_12_23_df_$V4013)
pnadc_12_23_df_%>% summarise_all(list(name = ~sum(is.na(.))/length(.)))
pnadc_12_23_df_ <- pnadc_12_23_df |>
filter(Capital=="Município de Fortaleza (CE)") |>
select(Capital,Ano,V4010,V4013,V2007,V2010,VD3004,idadeEco2)
pnadc_12_23_df_%>% summarise_all(list(name = ~sum(is.na(.))/length(.)))
pnadc_12_23_df_ <- pnadc_12_23_df |>
filter(Capital=="Município de Fortaleza (CE)") |>
select(Capital,Ano,VD4010,V2007,V2010,VD3004,idadeEco2)
pnadc_12_23_df_%>% summarise_all(list(name = ~sum(is.na(.))/length(.)))
pnadc_12_23_df_ <- pnadc_12_23_df |>
filter(Capital=="Município de Fortaleza (CE)") |>
select(Capital,Ano,VD4010,V2007,V2010,VD3004,idadeEco2)
View(pnadc_12_23_df_)
View(pnadc_12_23)
View(pnadc_12_23_df_)
