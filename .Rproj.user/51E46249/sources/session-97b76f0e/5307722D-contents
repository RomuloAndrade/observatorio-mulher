
# Pacotes -------------------------------------------------------------------------------------



library(purrr)
library(tidyverse)
library(sf)
library(leaflet)


# Leitura dados -------------------------------------------------------------------------------


shp_Bairros <- st_read('C:/Dados/Dash/Painel-PREVIO/app/data/shp_Bairros/shp_BairrosA.shp',quiet =T)

# shp_atuacao <- st_read('C:/Dados/Dash/Painel-PREVIO/app/data/poligonais_atuacao/poligonais_atuacao.shp',quiet =T)  |> 
#   select(bairro) |> 
#   st_transform(4326)  |> 
#   mutate(Poligono=c('Poligonal 3','Poligonal 1', 'Poligonal 2', 'Poligonal 4', 'Poligonal 5', 'Poligonal 6')) |> 
#   arrange(Poligono) |>
#   select(Poligono) |> 
#   mutate(col=c('#C4DD81','#FFEE6A','#39DDB2','#DCAEE9','#FEB95C','#93B5EC'))
# 
setores <- read_csv2('C:/Dados/Censo2022/setor_censitario/Agregados_preliminares_por_setores_censitarios_CE.csv') |> 
  filter(NM_MUN=='Fortaleza') |> 
  select(CD_SETOR,
         NM_MUN,
         AREA_KM2,
         v0001:v0007) |> 
  mutate(AREA_KM2=parse_number(AREA_KM2))

nome_bairro<- read_csv('C:/Dados/Dash/Painel-PREVIO/app/data/nomes_bairros.csv',show_col_types = FALSE)
# 

# malha shp
malha<- read_sf('C:/Dados/Censo2022/setor_censitario/CE_Malha_Preliminar_2022/CE_Malha_Preliminar_2022.shp')


# Tratamento ----------------------------------------------------------------------------------

{
  malha_fortaleza <- malha |>
  filter(NM_MUN=='Fortaleza') |> 
  select(1,2,8) |> 
  sf::st_transform(4326) |> 
  mutate(lng = map_dbl(geometry, ~st_point_on_surface(.x)[[1]]),
         lat = map_dbl(geometry, ~st_point_on_surface(.x)[[2]]))



malha_ponto <- malha_fortaleza |> 
  st_drop_geometry() |> 
  select(CD_SETOR,
         lng,
         lat) |> 
  st_as_sf(coords = c("lng","lat"),
           crs = 4326) 

malha_bairro <- st_join(malha_ponto,shp_Bairros,  join = st_intersects, )

malha_bairro_df <- left_join(setores,malha_bairro)
malha_setor_df <- left_join(setores,malha_fortaleza,by=c('CD_SETOR'='CD_SETOR'))

malha_setor_df <- malha_setor_df |>
  select(-'NM_MUN.y',
         -'AREA_KM2.y') |> 
rename(NM_MUN=NM_MUN.x,
       AREA_KM2=AREA_KM2.x)

malha_setor_df <- left_join(malha_setor_df,malha_bairro_df |> 
                              st_drop_geometry() |> 
                              select(CD_SETOR,bairro)) |> 
  mutate(MEDIA_MORAD= v0001 /v0007)



bairro_censo_df <- malha_bairro_df |> 
  group_by(bairro,x,y,areaB) |> 
  summarise_at(vars(AREA_KM2,v0001:v0004,v0007), sum, na.rm = TRUE)

bairro_censo_df <- bairro_censo_df |> 
  mutate(`Média_moradores_por_domic`= Pessoas/Domicílios_particulares_ocupados )



shp_Bairros_censo <- left_join(bairro_censo_df,shp_Bairros) |> select(-areaB)
shp_Bairros_censo <- shp_Bairros_censo |> 
  mutate(media_moradores_domic= v0001 /v0007,
         Densidade = v0001/AREA_KM )
#writexl::write_xlsx(bairro_censo_df,'C:/Dados/Censo2022/setor_censitario/pop_bairro_setor_censo_2022.xlsx')
#sf::write_sf(shp_Bairros_censo,'C:/Dados/Censo2022/setor_censitario/shp_Bairros_censo.shp')
#write_sf(malha_setor_df,'C:/Dados/Censo2022/setor_censitario/shp_setor_censo_df.shp')

desc_setor <- bairro_censo_df |> 
  select(-x,
         -y) |> 
  mutate(`Média_moradores_por_domic`= Pessoas/Domicílios_particulares_ocupados,
         Densidade=Pessoas/AREA_KM2)

write.csv(desc_setor,'C:/Dados/Censo2022/setor_censitario/desc_setor.csv',row.names = F)
a <- read.csv('C:/Dados/Censo2022/setor_censitario/desc_setor.csv')


}


# Mapa ----------------------------------------------------------------------------------------


shp_Bairros_censo<- read_sf('C:/Dados/Censo2022/setor_censitario/shp_Bairros_censo.shp')
shp_Setor_censo<-read_sf('C:/Dados/Censo2022/setor_censitario/shp_setor_censo_df.shp')
bairro_censo_df <- readxl::read_xlsx('C:/Dados/Censo2022/setor_censitario/pop_bairro_setor_censo_2022.xlsx')
desc_setor_censo <- read_csv('C:/Dados/Censo2022/setor_censitario/desc_setor.csv',show_col_types = FALSE)

# writexl::write_xlsx(desc_setor_censo,'C:/Dados/Censo2022/setor_censitario/desc_bairro_censo_22.xlsx')


colorpal_pop <-  colorNumeric("GnBu", bairro_censo_df$Pessoas )
colorpal_pop_setor <-  colorNumeric("GnBu", shp_Setor_censo$v0001  )

sca_setor <-  colourScale(shp_Setor_censo$v0001 , breaks=6,
                       style="quantile",dec=1,revCol=F)

colorpal_pop_setor <- colorBin("GnBu", shp_Setor_censo$v0001, bins = sca_setor$breaks)  


my_labelFormat <- function(...) {
  fun <- labelFormat(...)
  evalq(formatNum <- function(x) {
    format(round(transform(x), digits), trim = TRUE, scientific = FALSE, 
           big.mark = big.mark, decimal.mark = ',')
  }, environment(fun))
  return(fun)
}


# sca_qtd <- colourScale(bairro_censo_df$Pessoas , breaks=6,
#                        style="quantile",dec=1,revCol=F)
# sca_renda <- colourScale(bairro_censo_df$Pessoas, breaks=6,
#                          style="quantile",dec=1,revCol=F)


base <- leaflet() |>
  setMapWidgetStyle(list(background = "white"))  |> 
  addProviderTiles(providers$CartoDB.PositronNoLabels, group = "CartoDB.PositronNoLabels")  |> #CartoDB.Positron
  addProviderTiles(providers$OpenStreetMap, group = "OpenStreetMap")  |> 
  addProviderTiles(providers$CartoDB.DarkMatter, group = "CartoDB.DarkMatter")  |>
  addProviderTiles(providers$Esri.WorldImagery, group = "WorldImagery")  |>
  addLayersControl(
    baseGroups = c("CartoDB.Positron","OpenStreetMap",'CartoDB.DarkMatter','WorldImagery'),
    overlayGroups = c(
      "Bairros",
      "Área de Atuação",
      'Nomes dos bairros')
  ) |>
  #hideGroup("Elementos do mapa")  |>
 # hideGroup('Nomes dos bairros') |>
  addScaleBar(position = "bottomright",
              options = scaleBarOptions(imperial = F))  |>
  setView(-38.52782, -3.785804, zoom = 12) |>
  addFullscreenControl(pseudoFullscreen = T)|> 
  # addPolygons(data=shp_atuacao,
  #             weight=1,
  #             opacity = 0.5,
  #             fillColor = shp_atuacao$col,
  #             # popup = PopAtuac() ,
  #             dashArray = "0",
  #             fillOpacity = 0.6,
  #             group = 'Área de Atuação',
  #             highlight=highlightOptions(
  #               weight = 5,
  #               color = "#865",
  #               dashArray = "",
  #               fillOpacity = 0.5,
  #               bringToFront = F) )|> 
  addPolygons(data = shp_Bairros,
              weight = 2,
              opacity = 1,
              color = 'black' ,
              popup =  ~bairro,
              dashArray = "0",
              fillOpacity = 0,
              group = "Bairros"
  )  |>
  # addPolygons(data=shp_Setor_censo,
  #             weight=1,
  #             opacity = 0.5,
  #             color='red',
  #             #popup =  ~CD_SETOR,
  #             dashArray = "0",
  #             fillOpacity = 0,
  #             group = "setor_censitario")  |>
  
  # addLabelOnlyMarkers(data = shp_Bairros,group='Nomes dos bairros',
  #                     lng = ~x, lat = ~y, label = ~shp_Bairros$bairro  ,
  #                     labelOptions = labelOptions(noHide = T,  textOnly = T,
  #                                                 direction = "right",
  #                                                 style = list(
  #                                                   "color" = "black",
  #                                                   'background-color'= 'rgba(255,255,255, 0)',
  #                                                   'padding'= '0px 0px 0px 0px'      ))) |> 
  addMeasure(
    position = "topright",
    primaryLengthUnit = "meters",
    primaryAreaUnit = "sqmeters",
    secondaryLengthUnit = "kilometers",
    activeColor = "#3D535D",
    completedColor = "#7D4479",
    localization = "pt_BR",
    captureZIndex = 10000
  )
{
  # addMapPane("pontos", zIndex = 420) |>
  # addMapPane("poligono", zIndex = 415) |>
  # addMapPane("bairros",zIndex = 410) |> 
  # addMapPane("coropletico",zIndex = 405) |> 
  # addPolygons(data=shp_Bairros_censo,
  #             opacity = 0.5,
  #             weight=1.5,
  #             fillColor =   ~colorpal_pop(Pessoas ),
  #             dashArray = "1",
  #             group = 'id_qtd',
  #             popup =   popupTable(shp_Bairros_censo ,
  #                                         zcol = c("bairro","Pessoas",'AREA_KM','Densidade'),
  #                                         feature.id = FALSE,
  #                                         row.numbers = FALSE),
  #            # options = pathOptions(pane = "coropletico"),
  #             fillOpacity = .8)  |>
  # addLegend(data=shp_Bairros_censo,
  #           pal = colorpal_pop,
  #           values =  ~Pessoas ,
  #           position = 'bottomleft',
  #           labFormat = my_labelFormat(
  #             big.mark='.',
  #             digits=0),
  #           title = 'Qtd. Pessoas',
  #           opacity = 1) |>
base |> 
  addPolygons(data=shp_Setor_censo,
              opacity = 0.5,
              weight=1,
              fillColor =   ~colorpal_pop_setor(v0001   ),
              dashArray = "0",
              group = 'id_qtd',
              color='black',
              popup =   popupTable(shp_Setor_censo ,
                                   zcol = c("CD_SETO","v0001"),
                                   feature.id = FALSE,
                                   row.numbers = FALSE),
              #options = pathOptions(pane = "coropletico"),
              fillOpacity = .8) |>
  addLegend(data=shp_Setor_censo,
            pal = colorpal_pop_setor,
            values =  ~v0001 ,
            position = 'bottomleft',
            labFormat = my_labelFormat(
              big.mark='.',
              digits=0),
            title = 'Qtd. Pessoas',
            opacity = 1)
  
# addLegend(data=shp_Bairros_censo,
#           pal = colorpal_pop,
#           values =  ~Pessoas ,
#           position = 'bottomleft',
#           labFormat = my_labelFormat(
#             big.mark='.',
#             digits=0),
#           title = 'Qtd. Pessoas',
#           opacity = 1) 

}

# Ciclofaixa ----------------------------------------------------------------------------------
{
Ciclofaixas<- read_sf('C:/Dados/Ciclofaixa/vw_Ciclofaixas.shp', options = "ENCODING=WINDOWS-1252")|>
  st_zm( drop = T, what = "ZM") |> 
  select(id,Tipologia )

Ciclorrotas<- read_sf('C:/Dados/Ciclofaixa/vw_Ciclorrotas.shp', options = "ENCODING=WINDOWS-1252")|>
  st_zm( drop = T, what = "ZM")|> 
  select(id,Tipologia )

Ciclovias<- read_sf('C:/Dados/Ciclofaixa/vw_Ciclovias.shp', options = "ENCODING=WINDOWS-1252")|>
  st_zm( drop = T, what = "ZM") |> 
  select(id,Tipologia )

vias<- bind_rows(Ciclofaixas,
          Ciclorrotas,
          Ciclovias) |> 
  mutate(Tipologia = case_when(
    Tipologia == "ciclofaixa" ~ 'Ciclofaixa',
    Tipologia == "Ciclofaixa "  ~ 'Ciclofaixa',
    TRUE ~ Tipologia),
         Tipologia=str_trim(Tipologia)  )

vias$Tipologia |> unique()
#write_sf(vias,'C:/Dados/Ciclofaixa/vias_bike.shp')
vias <- read_sf('C:/Dados/Ciclofaixa/vias_bike.shp')

vias_union<- vias |> sf::st_union(is_coverage=T,by_feature=T)

 sum(desc_vias$`Ciclovia`,na.rm = T)

#calular buffer
system.time(buffer <- st_buffer(vias,dist = 100,nQuadSegs= 100) )

system.time(buffer2 <- st_buffer(vias_union,dist = 100,nQuadSegs= 500,mitreLimit=10) )


}

Pracas_U <- ms_simplify(Pracas, keep = 0.5,
                        keep_shapes = T)



system.time(buffer2 <- st_buffer(Pracas_U ,dist = 100))
system.time(buffer3 <- geos::geos_buffer(Pracas_U ,distance = 100))


system.time(buffer2U <- sf::st_union(buffer2) )

system.time(buffer3U <- st_as_sf(
  maptools::unionSpatialPolygons(as_Spatial(buffer2),rep(1, nrow(buffer2)))))

st_area(buffer2U)   
st_area(st_make_valid(buffer2U)) |>  sum()
st_area(buffer3U)
st_area(st_make_valid(buffer3U))



buffer3UU <- 
# |> 
#   st_sf() |>
#   st_cast("POLYGON")


setores = shp_Setor_censo |>
  st_filter(y = buffer2, .predicate = st_intersects)

inter <- st_intersection(setores,buffer2) 
df_inter <- inter |> 
  mutate(area_buffer = as.numeric(st_area(geometry)),
         perc_area = area_buffer/area_setor  ,
         perc_pessoas = perc_area*v0001
  )

shp_Setor_censo$v0001 |> sum()

df_inter |> 
  st_drop_geometry() |> 
  dplyr::summarise(pnb=sum(perc_pessoas)/2428708)




shp_Setor_censo_simp <- ms_simplify(shp_Setor_censo, keep = 0.5,
                                    keep_shapes = FALSE)

buffer <- sf::st_union(buffer) 
  
buffer2 <- st_make_valid(buffer2) |> 
          st_sf() |>
          st_cast("POLYGON")


setores = shp_Setor_censo_simp |>
    st_filter(y = buffer2, .predicate = st_intersects)

inter <- st_intersection(setores,buffer2) 
 {
# base2 <- st_intersection(vias,shp_Bairros) |>
#   mutate(Dimensão =st_length(geometry) ) |>
#   st_drop_geometry() |>
#   group_by(bairro,Tipologia) |>
#   summarise(Dimensão=round(sum(Dimensão,na.rm = T)/1000,2)) |>
#   mutate(`Total vias bike`  = round(sum(Dimensão,na.rm = T),2)) |>
#   pivot_wider( names_from = Tipologia  ,
#                 values_from =Dimensão) 
#     
# 
# write_csv(base2,'C:/Dados/Ciclofaixa/desc_vias.csv')
}

df_inter <- inter |> 
         mutate(area_buffer = as.numeric(st_area(geometry)),
                perc_area = area_buffer/area_setor  ,
                perc_pessoas = perc_area*v0001
                )

shp_Setor_censo$v0001 |> sum()

df_inter |> 
  st_drop_geometry() |> 
  dplyr::summarise(pnb=sum(perc_pessoas)/2428708)

library(rmapshaper)
library(magrittr)
library(sf)
identical(sf::st_as_sf(buffer3), sf::st_as_sfc(buffer2))
base |> 
  #addPolygons(data=shp_Setor_censo, popup=~area_setor, color='#234',weight=1) |> 
  addPolygons(data=sf::st_as_sfc(buffer3) ,fillColor ='green',weight=2,opacity = .9) |>  
  addPolygons(data=buffer2 ,color='red',weight=1,opacity = 1)# |> 
#  addPolygons(data=df_inter    ,color='red',weight=1,opacity = .5)  |> 
  # addPolygons(data=buffer2 |> st_union(),color='red',weight=1,opacity = .5) |> 
 # addPolygons(data=Pracas ,color='pink',weight=1,opacity = 1) 




poligon<- Areninhas

st_geometry_type(Areninhas, by_geometry = F) == 'POINT'

if(st_geometry_type(poligon, by_geometry = F) != 'POINT'){
  poligon1 <-  ms_simplify(poligon, keep = 0.5,
                          keep_shapes = T)} 

  
  
  
  }

# Testes --------------------------------------------------------------------------------------

  
  library(rgeos)
  class(l1)
  class(vias)
  
  vias_ <- vias |> 
    mutate(Dimensão =st_length(geometry) )
  st_length(x)
  
  l1 = readWKT("LINESTRING(0 0,1 5,4 5,5 2,8 2,9 4,4 6.5)")
  viass <- (as_Spatial(vias))
  )sf:::
  par(mfrow=c(2,3))
  plot(gBuffer(viass,capStyle="ROUND"));plot(l1,col='blue',add=TRUE);title("capStyle: ROUND")
  plot(gBuffer(l1,capStyle="FLAT"));plot(l1,col='blue',add=TRUE);title("capStyle: FLAT")
  plot(gBuffer(l1,capStyle="SQUARE"));plot(l1,col='blue',add=TRUE);title("capStyle: SQUARE")
  
  plot(gBuffer(l1,quadsegs=1));plot(l1,col='blue',add=TRUE);title("quadsegs: 1")
  plot(gBuffer(l1,quadsegs=2));plot(l1,col='blue',add=TRUE);title("quadsegs: 2")
  plot(gBuffer(l1,quadsegs=5));plot(l1,col='blue',add=TRUE);title("quadsegs: 5")
plot(viass)
plot(gBuffer(viass,capStyle="ROUND"))
  


library(leaflet.extras)
mydrawPolylineOptions <- function (allowIntersection = TRUE, 
                                   drawError = list(color = "#b00b00", timeout = 2500), 
                                   guidelineDistance = 20, metric = TRUE, feet = FALSE, zIndexOffset = 2000, 
                                   shapeOptions = drawShapeOptions(fill = FALSE), repeatMode = FALSE) {
  leaflet::filterNULL(list(allowIntersection = allowIntersection, 
                           drawError = drawError, guidelineDistance = guidelineDistance, 
                           metric = metric, feet = feet, zIndexOffset = zIndexOffset,
                           shapeOptions = shapeOptions,  repeatMode = repeatMode)) }
mydrawPolylineOptions <- function (allowIntersection = TRUE, 
                                   drawError = list(color = "#b00b00", timeout = 2500), 
                                   guidelineDistance = 20, metric = TRUE, feet = FALSE, zIndexOffset = 2000, 
                                   shapeOptions = drawShapeOptions(fill = FALSE), repeatMode = FALSE) {
  leaflet::filterNULL(list(allowIntersection = allowIntersection, 
                           drawError = drawError, guidelineDistance = guidelineDistance, 
                           metric = metric, feet = feet, zIndexOffset = zIndexOffset,
                           shapeOptions = shapeOptions,  repeatMode = repeatMode)) }

leaflet() %>% setView(10.975342,45.421588,9) %>%
  addTiles() %>%
  addProviderTiles(providers$OpenStreetMap.Mapnik) %>%
  addDrawToolbar(
    polylineOptions = mydrawPolylineOptions(metric=TRUE, feet=FALSE),
    editOptions=editToolbarOptions(selectedPathOptions=selectedPathOptions())
  ) 


















library(leaflet)
library(shiny)

ui <- fluidPage(
  leafletOutput("mymap"),
  br(),
  actionButton("resetArea", label = "Reset total area to 0"),
  textOutput("areaText"),
  textOutput("areaSumText")
)

server <- function(input, output, session) {
  
  output$mymap <- renderLeaflet({
    leaflet() %>% addTiles() %>%
      fitBounds(-73.9, 40.75, -73.95,40.8) %>%
      addMeasure() %>%
      htmlwidgets::onRender("
        function(el, x) {
          var myMap = this;
          myMap.on('measurefinish',
            function (e) {
              Shiny.onInputChange('selectedArea', e.area);
            })
        }")
  })
  
  totalArea <- reactiveValues(sum = NULL)
  
  observe({
    req(input$selectedArea)
    isolate({
      if (is.null(totalArea$sum)) {
        totalArea$sum = input$selectedArea
      } else {
        totalArea$sum = totalArea$sum + input$selectedArea
      }
    })
  })
  observeEvent(input$resetArea, {
    totalArea$sum = NULL
  })
  
  output$areaText <- renderText({
    paste("Area",input$selectedArea)
  })
  output$areaSumText <- renderText({
    req(totalArea$sum)
    paste("Sum of Area",totalArea$sum)
  })
  
}

shinyApp(ui, server)

shp_Bairros = st_read('app/data/shp_Bairros/shp_BairrosA.shp',quiet =T)
shp_Bairros_censo = read_sf('C:/Dados/Censo2022/setor_censitario/shp_Bairros_censo.shp')
shp_Setor_censo = read_sf('C:/Dados/Censo2022/setor_censitario/shp_setor_censo_df.shp')

type <- 'Samu'

poligon <-  switch(type,
         vias = read_sf('C:/Dados/Ciclofaixa/vias_bike.shp'),
         Areninhas = read_sf('app/data/Areninhas/vw_Areninhas.shp',options = "ENCODING=WINDOWS-1252",quiet =T),
         eco = read_sf('app/data/vw_Ecopontos/vw_Ecopontos.shp',options = "ENCODING=WINDOWS-1252" ,quiet =T),
         Pracas = read_sf('app/data/Pracas/Praças_de_Fortaleza/vw_PracasFortaleza.shp', options = "ENCODING=WINDOWS-1252",quiet =T),
         AdocaoPracasEAreasVerdes = read_sf('app/data/Pracas/Adoção_de_Praças_e_Áreas_Verdes/vw_AdocaoPracasEAreasVerdes.shp',options = "ENCODING=WINDOWS-1252",quiet =T),
         Pracas_Vivas= read_sf('app/data/Pracas/Praças_Vivas/vw_PracasVivas.shp', options = "ENCODING=WINDOWS-1252",quiet =T),
         EquipamentosSaude_cnes = read_sf('app/data/202303_EstabelecimentosSaudeCNES/saude.shp',quiet =T),
         Conselhos_Tutelares = st_read('app/data/vw_ConselhosTutelares/vw_ConselhosTutelares.shp',options = "ENCODING=WINDOWS-1252",quiet =T),
         Equip_cult = st_read('app/data/tblCultura/Equip_cult.shp',quiet =T),
         Mediacao = st_read('app/data/Sesec/202304_NucleosMediacaoConflitosSESECNOVO/Mediacao_conflitos.shp',quiet =T),
         Torre =  read_sf('app/data/Sesec/202304_BasesPMPU2022SESECNOVO/Bases_PMPU.shp',quiet =T),
         Territorios_PMPU = read_sf('app/data/Sesec/202304_TerritoriosPMPU2022SESECNOVO/Territorios_PMPU.shp'),
         Territorios_GEMP = read_sf('app/data/Sesec/202304MicroterritoriosGEMPGMFNOVO/Microterritorios_GEMP_GMF.shp'),
         Escolas_munic =  read_sf('app/data/Escolas/escolas.shp'),
         Cameras = st_read('app/data/Sesec/202304_PosteamentoCamerasPMPUSESECNOVO/cameras_geral.shp',quiet =T),
         Samu  = st_read('app/data/vw_BasesSAMU/vw_BasesSAMU.shp',options = "ENCODING=WINDOWS-1252",quiet =T),
         Equip_Assist_Social = st_read('app/data/vw_EquipamentosAssistenciaSocial/vw_EquipamentosAssistenciaSocial.shp', options = "ENCODING=WINDOWS-1252",quiet =T)
         )



buffer <-st_buffer(Pracas,dist = 300,nQuadSegs= 1) |> 
  st_make_valid(buffer)|>
  st_sf() |>
  st_cast("POLYGON")



setores = shp_Setor_censo |>
  st_filter(y = buffer, .predicate = st_intersects)

inter <- st_intersection(setores,buffer) 

df_inter <- inter |> 
  mutate(area_buffer = as.numeric(st_area(geometry)),
         perc_area = area_buffer/area_setor  ,
         perc_pessoas = perc_area*v0001
  )|> 
  st_drop_geometry()

Perc_prox( df_inter  |> 
             summarise(pnb=round(100*sum(perc_pessoas)/2428708,2) ))


#
output$vbox <- renderValueBox({
  valueBox(
    value = Perc_prox(),
    subtitle = "Percentual de pessoas próximas",
    color = "indigo",
    icon = icon("comments"),
    footer = textOutput(ns('raio_valor')))
  
  
})


library('raster')
library('geosphere')
library('mapview') 
library(maptools)
library(rgeos)
library(sf)

# Get SpatialPolygonsDataFrame object example
pols<- getData('GADM', country = 'DK', level = 2)

#Project to suitable projection (to be able to calculate area, see later
utm32 = "+proj=utm +zone=32 +ellps=WGS84 +units=m +no_defs"
pols<- spTransform(pols, CRS(utm32))

mapview(pols)


































