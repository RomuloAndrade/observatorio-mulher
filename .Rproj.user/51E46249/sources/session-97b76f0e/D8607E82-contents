# Load library --------------------------------------------------------------------------------
box::use(
  shiny[...],
  bs4Dash[...],
  #echarts4r[e_theme_register],
  waiter[...],
  shinyWidgets[panel,
               materialSwitch],
  datamods[...],
  dplyr[summarise,
        group_by,
        mutate,
        filter,
        left_join,
        select,
        mutate_at,
        if_else],
  lubridate[floor_date,ymd],
  prophet[prophet,
          make_future_dataframe],
  echarts4r[e_charts,
            e_x_axis,
            e_title,
            e_y_axis,
            e_line,
            e_bar,
            e_mark_area,
            e_band2,
            e_axis_labels,
            e_format_y_axis,
            e_tooltip,
            e_datazoom,
            e_group,
            e_grid,
            renderEcharts4r,
            e_toolbox_feature,
            e_toolbox,
            e_flip_coords,
            e_timeline_opts,
            e_add_nested,
            e_legend,
            e_axis_formatter,
            e_connect_group
            ]
  
)


# Load data -----------------------------------------------------------------------------------

{
  
  df_det <-  arrow::read_parquet('data/desp_2021_2023.parquet') 

  db<- readRDS('data/db_despesa_funcao_mes.rds')
  
  df <-  db |> 
    group_by(ds = floor_date(ds,unit='month')) |> 
    summarise(y = sum(y, na.rm = TRUE)) 
  
  #model
  model <- prophet(df,weekly.seasonality = F,
                   daily.seasonality = F,
                   seasonality.mode='multiplicative'             )
  
  future <- make_future_dataframe(model,freq='month', periods = 24)
  
  forecast <- predict(model, future) 
  
  forecast$yearly <- {if ("yearly" %in% colnames(forecast)) forecast$yearly else  0}
  forecast <- mutate(.data=forecast,
                     ds = as.Date(ds)
  ) |> 
    select(ds,
           yhat,
           yhat_upper,
           yhat_lower,
           trend,
           yearly,
           additive_terms)
  
  
  
  combined <- left_join(forecast,df ,by=c('ds'='ds') ) |> 
    mutate(remainder = y - trend - yearly - additive_terms,
           yhat=ifelse(yhat>=0,yhat,0),
           yhat_upper=ifelse(yhat_upper>=0,yhat_upper,0),
           yhat_lower=ifelse(yhat_lower>=0,yhat_lower,0))
  
  
  
  
}

# Load functions ------------------------------------------------------------------------------

{
  formatar_numero_br <- function(serie) {
    htmlwidgets::JS(
      glue::glue(
        "function(params) {return Intl.NumberFormat('pt-BR', { style: 'decimal'}).format(params.value[{{serie}}]);}",
        .open = "{{",
        .close = "}}"
      )
    )
  }
  trat <-function(x) {ifelse(forecast$ds<=max(df$ds), NA , x)
  }
  {
# selectizeGroupServer_det <- function (input, output, session, data, vars, inline = T) 
#   {
#     
#     `%inT%` <- function(x, table) {
#       if (!is.null(table) && ! "" %in% table) {
#         x %in% table
#       } else {
#         rep_len(TRUE, length(x))
#       }
#     }
#     ns <- session$ns
#     shinyWidgets:::toggleDisplayServer(session = session, id = ns("reset_all"), 
#                                        display = "none")
#     rv <- reactiveValues(data = NULL, vars = NULL)
#     observe({
#       if (is.reactive(data)) {
#         rv$data <- data()
#       }
#       else {
#         rv$data <- as.data.frame(data)
#       }
#       if (is.reactive(vars)) {
#         rv$vars <- vars()
#       }
#       else {
#         rv$vars <- vars
#       }
#       for (var in names(rv$data)) {
#         if (var %in% rv$vars) {
#           shinyWidgets:::toggleDisplayServer(session = session, id = ns(paste0("container-", 
#                                                                                var)), display = ifelse(inline, "table-cell", 
#                                                                                                        "block"))
#         }
#         else {
#           shinyWidgets:::toggleDisplayServer(session = session, id = ns(paste0("container-", 
#                                                                                var)), display = "none")
#         }
#       }
#     })
#     observe({
#       lapply(X = rv$vars, FUN = function(x) {
#         vals <- sort(unique(rv$data[[x]]))
#         updateSelectizeInput(session = session, inputId = x, 
#                              choices = vals, selected = isolate(input[[x]]), 
#                              server = TRUE)
#       })
#     })
#     observeEvent(input$reset_all, {
#       lapply(X = rv$vars, FUN = function(x) {
#         vals <- sort(unique(rv$data[[x]]))
#         updateSelectizeInput(session = session, inputId = x, 
#                              choices = vals, server = TRUE)
#       })
#     })
#     observe({
#       vars <- rv$vars
#       lapply(X = vars, FUN = function(x) {
#         ovars <- vars[vars != x]
#         observeEvent(input[[x]], {
#           data <- rv$data
#           indicator <- lapply(X = vars, FUN = function(x) {
#             data[[x]] %inT% input[[x]]
#           })
#           indicator <- Reduce(f = `&`, x = indicator)
#           data <- data[indicator, ]
#           if (all(indicator)) {
#             shinyWidgets:::toggleDisplayServer(session = session, id = ns("reset_all"), 
#                                                display = "none")
#           }
#           else {
#             shinyWidgets:::toggleDisplayServer(session = session, id = ns("reset_all"), 
#                                                display = "block")
#           }
#           for (i in ovars) {
#             if (is.null(input[[i]])) {
#               updateSelectizeInput(session = session, inputId = i, 
#                                    choices = sort(unique(data[[i]])), server = TRUE)
#             }
#           }
#           if (is.null(input[[x]])) {
#             updateSelectizeInput(session = session, inputId = x, 
#                                  choices = sort(unique(data[[x]])), server = TRUE)
#           }
#         }, ignoreNULL = FALSE, ignoreInit = TRUE)
#       })
#     })
#     
#     # observe({
#     #   updateSelectInput(inputId = "ano", choices = unique(rv$data$ano), selected = '2023')
#     # })
#     
#     
#     return(reactive({
#       data <- rv$data
#       vars <- rv$vars
#       indicator <- lapply(X = vars, FUN = function(x) {
#         data[[x]] %inT% input[[x]]
#       })
#       indicator <- Reduce(f = `&`, x = indicator)
#       data <- data[indicator, ]
#       return(data)
#     }))
#   }  
  }
}


# Server --------------------------------------------------------------------------------------


#' @export
server <- function(input, output, session) {

  observe({
    updateTabItems(session, "current_tab", selected = "inicio")
  })
  
  
# Aba Série temporal --------------------------------------------------------------------------


  
  comb <- reactiveVal(combined)
  tratamento <- reactiveVal(trat)
  db_ano <- reactiveVal(db) 
  
  observeEvent(input$update,{
    {if(length(input$funcao)>=5 | is.null(input$funcao)){
      updateCheckboxInput(session, "agrupa", value = T)
    } else {
      updateCheckboxInput(session, "agrupa", value = F) } }  
    # data  
    db_aux <-  {if(is.null(input$funcao)){
      db} else {
        filter(db, funcao %in% input$funcao) } }
    
    df_filtered <- db_aux |> 
      group_by(ds = floor_date(ds,unit='month')) |> 
      summarise(y = sum(y, na.rm = TRUE)) 
    
    updateActionButton(inputId = 'update',disabled=TRUE)
    
    #model
    model2 <- prophet(df_filtered,weekly.seasonality = F,
                      daily.seasonality = F,seasonality.mode='multiplicative')
    future2 <- make_future_dataframe(model2,freq='month', periods = 24)
    
    forecast2 <- predict(model2, future2) 
    
    forecast2$yearly <- {if ("yearly" %in% colnames(forecast2)) forecast2$yearly else  0}
    forecast2 <- mutate(.data=forecast2,
                        ds = as.Date(ds)
    ) |> 
      select(ds,
             yhat,
             yhat_upper,
             yhat_lower,
             trend,
             yearly,
             additive_terms)
    
    
    trat2 <-function(x) {ifelse(forecast2$ds<=max(df_filtered$ds), NA , x)}
    
    
    combined2 <- left_join(forecast2,df_filtered ,by=c('ds'='ds') ) |> 
      mutate(remainder = y - trend - yearly - additive_terms,
             yhat=ifelse(yhat>=0,yhat,0),
             yhat_upper=ifelse(yhat_upper>=0,yhat_upper,0),
             yhat_lower=ifelse(yhat_lower>=0,yhat_lower,0))
    
    
    tratamento(trat2)
    comb(combined2)
    db_ano(db_aux)
    
    
    
    
  })
  
  # Serie com previsao
  output$obser <-  renderEcharts4r({
    comb() |>
      mutate_at(2:7,.funs=tratamento()) |> 
      e_charts(x = ds)  |>
      e_x_axis(ds, axisPointer = list(
        show = TRUE,
        label = list(show = FALSE)
      )) |>
      e_y_axis(
        nameTextStyle = list(
          color = "#666666",
          fontWeight = "bold",
          align="left"
        )
      ) |>
      e_line(y, symbol = "none", name = "Observado", legend = FALSE)  |>  
      e_line(yhat, symbol = "none", name = "Previsão", legend = FALSE)  |>
      e_mark_area(
        itemStyle = list(color = "rgba( 171,200,186,.2)"),
        data = list(
          list(xAxis = ymd("2024-01-01"), name='Previsão'),
          list(xAxis = ymd("2026-02-01"))) )|> 
      e_band2(
        lower= yhat,
        upper= yhat_upper,
        color = "#d5b158", itemStyle = list(borderWidth = 0),
        name="Incerteza superior",legend=F) |>
      e_band2(
        upper = yhat,
        lower = yhat_lower,
        color = "#f3d999", itemStyle = list(borderWidth = 0),
        name='Incerteza inferior',legend=F
      ) |>
      e_axis_labels(y = "Observado e previsão para os próximo 24 meses") |> 
      e_format_y_axis(
        suffix = "",
        prefix = "",
        formatter = e_axis_formatter(locale = "PT", digits = 0)
      ) |> 
      e_tooltip(trigger = c("axis"))|>
      e_datazoom(show = F, toolbox = FALSE) |>
      e_group("decomp") |> 
      e_grid( bottom = 35)
  })  
  
  # decomposicao
  {
    output$trend_plot <-  renderEcharts4r({
      comb() |>
        e_charts(x = ds)  |>
        e_x_axis(ds, axisPointer = list(
          show = TRUE,
          label = list(show = FALSE)
        )) |>
        e_y_axis(splitNumber= 3,
                 nameLocation = "end",
                 nameTextStyle = list(
                   color = "#666666",
                   fontWeight = "bold",
                   align="left"
                 )
        ) |>
        e_line(trend, name= 'Tendência',symbol = "none", legend = FALSE) |>
        e_axis_labels(y = "Tendência") |>
        e_tooltip() |> 
        e_format_y_axis(
          suffix = "",
          prefix = "",
          formatter = e_axis_formatter(locale = "PT", digits = 0)
        ) |>
        e_grid(top = 30, bottom = 30) |> 
        e_group("decomp") |>
        e_datazoom(show = F, toolbox = FALSE)
    })
    output$yearly_plot <-  renderEcharts4r({
      comb() |>
        e_charts(x = ds)  |>
        e_x_axis(ds, axisPointer = list(
          show = TRUE,
          label = list(show = FALSE)
        )) |>
        e_y_axis(
          splitNumber= 2,
          nameLocation = "end",
          nameTextStyle = list(
            color = "#666666",
            fontWeight = "bold",
            align="left"
          )
        ) |>
        e_line(yearly,name='sazonalidade' , symbol = "none", legend = FALSE) |>
        e_tooltip() |> 
        e_axis_labels(y = "Sazonalidade") |>
        e_format_y_axis(
          suffix = "",
          prefix = "",
          formatter = e_axis_formatter(locale = "PT", digits = 2)
        ) |>
        e_grid(top = 30, bottom = 30) |> 
        e_datazoom( show = F,toolbox = FALSE ) |>
        e_group("decomp")
    })
    output$remainder_plot <-  renderEcharts4r({
      comb() |>
        e_charts(x = ds)  |>
        e_x_axis(ds, axisPointer = list(
          show = TRUE,
          label = list(show = FALSE)
        )) |>
        e_y_axis(splitNumber= 2,
                 nameLocation = "end",
                 nameTextStyle = list(
                   color = "#666666",
                   fontWeight = "bold",
                   align="left"
                 )
        ) |>
        e_bar(remainder, legend = FALSE) |>
        e_axis_labels(y = "Ruído") |>
        e_format_y_axis(
          suffix = "",
          prefix = "",
          formatter = e_axis_formatter(locale = "PT", digits = 0)
        ) |>
        e_grid(top = 30, bottom = 30) |> 
        e_datazoom(show = T, toolbox = FALSE) |>
        e_group("decomp") |>
        e_connect_group("decomp")
    })
  }
  # Serie anual funcao
  
  
observe({
  {if(length(input$funcao)>=5 | is.null(input$funcao) ){
    updateCheckboxInput(session, "agrupa", value = T)
  } else {
    updateCheckboxInput(session, "agrupa", value = F) } }
})

observeEvent(input$funcao,{
  updateActionButton(inputId = 'update',disabled=FALSE)

})

output$serie_ano_plot <-  renderEcharts4r({
    
db_aux <-  {if(is.null(input$funcao)){db} else {
        filter(db, funcao %in% input$funcao) } }

    
    if ( input$agrupa) {
      db_aux |> 
        group_by(ds = floor_date(ds,unit='year'))|> 
        summarise(y = round(sum(y, na.rm = TRUE)/1000000000,3),.groups = 'drop_last') |> 
        mutate(ds=stringr::str_remove(ds,'-01-01')) |> 
        e_charts(x = ds)  |>
        e_bar(y,legend = F,name='Valor total') |> 
        e_toolbox(iconStyle= list(
          color= "rgba(35, 210, 32, 1)"
        )) |>
        e_toolbox_feature(
          feature = "magicType",
          type = list("line", "bar" )
        ) |> 
        e_toolbox_feature(feature = "dataView") |>  
        e_tooltip( formatter = htmlwidgets::JS(
          "function(p) {
          return( 
          'Valor total: R$ ' + Intl.NumberFormat('pt-BR', { style: 'decimal'}).format(p.value[1]) +' bilhões'+
          '<br>Ano: ' +p.value[0]  );
          }"),  
          textStyle=list(fontFamily="arial", fontSize=12)) |> 
        e_axis_labels(
          y='(R$ Bilhões)') |>
        e_title(text = 'Despesa da PMF anual',textStyle=list(
          fontSize= 13
        )) |>
        e_y_axis(
          nameTextStyle = list(
            color = "#666666",
            fontWeight = "bold",
            align="left"
          )
        )
    }
    else {
      
      db_aux |> 
        group_by(ds = floor_date(ds,unit='year'),
                 funcao) |> 
        summarise(y =round(sum(y)/1000000,3),.groups = 'drop_last') |> 
        group_by(funcao) |> 
        mutate(ds=stringr::str_remove(ds,'-01-01')) |> 
        e_charts(x = ds,)  |>
        e_bar(y,barGap=0) |> 
        e_toolbox(iconStyle= list(
          color= "rgba(35, 210, 32, 1)")) |>
        e_toolbox_feature(
          feature = "magicType",
          type = list("line", "bar" )
        ) |> 
        e_toolbox_feature(feature = "dataView") |>  
        e_tooltip(trigger="item", formatter =
        htmlwidgets::JS(
          "function(p) {
          v = Intl.NumberFormat('pt-BR', { style: 'decimal'}).format(p.value[1]);
          return('<strong>' + p.seriesName + '</strong>' +
          '<br>Valor: R$ ' + Intl.NumberFormat('pt-BR', { style: 'decimal'}).format(p.value[1]) +' milhões'+
          '<br>Ano: ' +p.value[0]  );
          }"),
          textStyle=list(fontFamily="arial", fontSize=12)
        
         ) |> 
        e_axis_labels(y = "(R$ milhões)") |>
        e_title(text = 'Despesa da PMF anual',textStyle=list(
          fontSize= 13
        )) |>
        e_format_y_axis(
          suffix = "",
          prefix = "",
          formatter =  e_axis_formatter(locale = "PT", digits = 0)
        ) |>
        e_y_axis(
          nameTextStyle = list(
            color = "#666666",
            fontWeight = "bold",
            align="left"
          )
        )
    }
    
    
  })

  # Por função
  output$funcao_plot <-  renderEcharts4r({
    
    data_temp <-   db |> 
      group_by(ds = floor_date(ds,unit='year'),
               funcao) |> 
      summarise(y = round(sum(y, na.rm = TRUE)/1000000,3),.groups = 'keep') |> 
      mutate(ds=stringr::str_remove(ds,'-01-01'),
             color=if_else(funcao %in%input$funcao  , '#F56040','#833AB4')) 
    
    
    
    
    data_temp |> 
      group_by(ds) |> 
      e_charts(x = funcao,timeline = TRUE,tooltip=F)  |>
      e_x_axis( inverse = T) |>
      e_y_axis(show=F) |> 
      e_bar(y, bind=ds,  legend = F,realtimeSort = TRUE) |>
      e_add_nested('itemStyle', color) |> 
      e_timeline_opts(currentIndex= length(unique(data_temp$ds))-1,controlStyle= list(
        showNextBtn= F,
        showPrevBtn= F
      )) |> 
      e_tooltip(formatter = htmlwidgets::JS(
        "function(p) {
          return( '<strong>' + p.value[1] + '</strong><br>'+
          'Valor: R$ ' + Intl.NumberFormat('pt-BR', { style: 'decimal'}).format(p.value[0]) +' milhões'+
          '<br>Ano: '+ p.name   );
          }"),  
        textStyle=list(fontFamily="arial", fontSize=12)) |> 
      e_flip_coords() |> 
      e_title(
        text='Despesa PMF (R$ milhões)',textStyle=list(
          fontSize= 13) ,
        subtext = 'Funções'
      ) |> 
      e_grid(left = "30%",top = 35, bottom = 45) 

  }) 
  


# Aba Detalhamento ----------------------------------------------------------------------------

  
#   Filtro_DESP <-  select_group_server(
#     id = "Filtro_desp",
#     data = df_det,
#     vars = c('ano','orgao','funcao','programa','elemento_de_despesa','subelemento')
#   )
#   
#   output$limite_tab <- renderUI({
#     materialSwitch(inputId = "limite", label = "Exibir tudo", status = "info")
#   })
#   
#   
# db_temp <- reactiveVal(Filtro_DESP()[1:15 ,c('ano',
#                                              'orgao',
#                                              'funcao',
#                                              'programa',
#                                              'elemento_de_despesa',
#                                              'subelemento',
#                                              'favorecido',
#                                              'descricao_do_empenho',
#                                              'valor')]
#                        ) 
# 
# 
# observeEvent(input$limite,{
# 
#   if(isFALSE(input$limite)){
#     db_temp <-  db_temp[1:15,]
#     }  else{
#     db_temp <-  Filtro_DESP()[,c('ano',
#                                  'orgao',
#                                  'funcao',
#                                  'programa',
#                                  'elemento_de_despesa',
#                                  'subelemento',
#                                  'favorecido',
#                                  'descricao_do_empenho',
#                                  'valor')]}
#   
# 
# })
# 
#   output$table <- reactable::renderReactable({
# 
#     reactable::reactable(db_temp()  ,
#                          filterable = F,
#                          searchable = TRUE,
#                          minRows = 10,
#                          highlight = TRUE)
#   })  
  
}
