# Load library --------------------------------------------------------------------------------


box::use(
  shiny[...],
  bs4Dash[...],
  tidyr[pivot_longer],
  forcats[fct_reorder],
  echarts4r[e_theme_register,
            renderEcharts4r,
            e_axis_formatter,
            e_title,
            e_data,
            e_tooltip_item_formatter,
            e_bar,
            e_line,
            e_effect_scatter,
            e_toolbox_feature,
            e_legend,
            e_theme,
            e_grid,
            e_x_axis,
            e_y_axis,
            e_flip_coords,
            e_charts,
            e_color,
            e_tooltip,
            e_pie,
            e_group,
            e_connect_group,
            e_toolbox,
            e_chart],
  waiter[...],
  sf[st_drop_geometry,
    #sf_use_s2,
    #st_read,
    ],
  tidyr[pivot_wider],
  dplyr[left_join,
        right_join,
          arrange,
          ungroup,
          mutate,
          rename,
          select,
          filter,
          summarise,
          group_by],
    # readr[read_csv2,read_csv],
    leaflet[leaflet,
            renderLeaflet,
            addProviderTiles,
            providers,
            addPolygons,
            addLegend,
            hideGroup,
            labelOptions,
            addScaleBar,
            setView,
            clearControls,
            clearGroup,
            addLabelOnlyMarkers,
            addMeasure,
            removeMeasure,
            scaleBarOptions,
            highlightOptions,
            addLayersControl,
            colorNumeric,
            colorBin,
            labelFormat,
            leafletProxy,
            colorFactor],
    leaflet.extras[addFullscreenControl,
                   setMapWidgetStyle],
    leafpop[popupTable],
    reactable[reactable,
              colDef,
              renderReactable],
    htmltools[div],
    mapmisc[colourScale],
    writexl[write_xlsx],
    D3plusR[d3plus,
            d3plusSize,
            d3plusUi,
            d3plusColor,
            d3plusDepth,
            d3plusLabels,
            d3plusTitle,
            renderD3plus],
  datamods[select_group_server]
    
)



# Load data -----------------------------------------------------------------------------------


## dados demografia --------------------------------------------------------

bairros_demografia <- readRDS('Dados/bairros_demografia.rds') 
df_faixa <- readRDS('Dados/df_faixa.rds')
df_cor_ <- readRDS('Dados/df_cor_.rds')
df_sexo <- readRDS('Dados/df_sexo.rds')
shp_Bairros <- readRDS('Dados/shp_bairros_demografia.rds')
Atividade_CNAE <- readRDS("C:/Romulo/Comandos R/Testes/Testes_ar/Atividade_CNAE2.rds")


## dados mercado -----------------------------------------------------------

# Atividade_CNAE <- readRDS("C:/Romulo/Comandos R/Testes/Testes_ar/Atividade_CNAE2.rds")
# pnadc_15_20 <- readRDS("PNADC_12_22_For.RDS")

Tipos_trab2 <- readRDS('Dados/Tipos_trab_2022.rds')

write.csv(Tipos_trab2,'Dados/Tipos_trab_2022.csv')

Tipo_T <-c("Trabalho formal","Trabalho informal")
Ano_T <-as.character(2012:2022)
Sexo_T <- c('Homem','Mulher')
Raca_T <- c('Outros','Parda','Branca','Preta')
Esc_T <- c('Fundamental incompleto','Médio incompleto',         
           'Médio completo','Fundamental completo',     
           'Superior incompleto','Superior completo',                       
           'Menos de 1 ano de estudo')

Idade_T <- c("20-29", "40-49", "60-65", "14-19", "30-39", "50-59", "66+") 

# Load functions ------------------------------------------------------------------------------
bar_chart <- function(label, width = "100%", height = "1rem", fill = "#00bfc4", background = NULL) {
  bar <- div(style = list(background = fill, width = width, height = height))
  chart <- div(style = list(flexGrow = 1, marginLeft = "0.375rem", background = background), bar)
  div(style = list(display = "flex", alignItems = "center"), label, chart)
}


my_labelFormat <- function(...) {
  fun <- labelFormat(...)
  evalq(
    formatNum <-   function(x) { # era  <-
    format(round(transform(x), digits), trim = TRUE, scientific = FALSE, 
           big.mark = big.mark, decimal.mark = ',')
  }, environment(fun))
  return(fun)
}
# Server --------------------------------------------------------------------------------------

server <- function(input, output, session) {


# server demografia -------------------------------------------------------


  
## Moradores ---------------------------------------------------------------

  
  output$vbox2.1 <- renderValueBox({
    valueBox(
      value = format(sum(bairros_demografia[bairros_demografia$NM_BAIRRO==input$select_1[1],'V01006']),  big.mark   = '.',decimal.mark = ',') ,
      subtitle = "Moradores",
      color = "info",
      icon = icon("people-roof"),
      footer = input$select_1[1],
      gradient = T
    )
  })
  
  output$vbox2.2 <- renderValueBox({
    valueBox(
      value = format(sum(bairros_demografia[bairros_demografia$NM_BAIRRO==input$select_1[2],'V01006']),  big.mark   = '.',decimal.mark = ',') ,
      subtitle = "Moradores",
      color = "info",
      icon = icon("people-roof"),
      footer = input$select_1[2],
      gradient = T
    )
  })


## Razao sexo --------------------------------------------------------------


razao_sexo1  <- reactive({ sum(bairros_demografia[bairros_demografia$NM_BAIRRO==input$select_1[1],'V01008'])/
               sum(bairros_demografia[bairros_demografia$NM_BAIRRO==input$select_1[1],'V01007'])*100 })
razao_sexo2  <- reactive({ sum(bairros_demografia[bairros_demografia$NM_BAIRRO==input$select_1[2],'V01008'])/
    sum(bairros_demografia[bairros_demografia$NM_BAIRRO==input$select_1[2],'V01007'])*100 })

output$vbox_mulher.1 <- renderValueBox({
  valueBox(
    value = format(sum(bairros_demografia[bairros_demografia$NM_BAIRRO==input$select_1[1],'V01008']) ,  big.mark   = '.',decimal.mark = ',') ,
    subtitle = "Mulheres",
    color = "fuchsia",
    icon = icon("person-dress"),
    footer = input$select_1[1],
    gradient = T
  )
})
output$vbox_mulher.2 <- renderValueBox({
  valueBox(
    value = format(sum(bairros_demografia[bairros_demografia$NM_BAIRRO==input$select_1[2],'V01008']) ,  big.mark   = '.',decimal.mark = ',') ,
    subtitle = "Mulheres",
    color = "fuchsia",
    icon = icon("person-dress"),
    footer = input$select_1[2],
    gradient = T
  )
})
output$vbox1.1 <- renderValueBox({
    valueBox(
      value = format(round(razao_sexo1(),2) ,  big.mark   = '.',decimal.mark = ',') ,
      subtitle = "Mulheres p/ cada 100 homens",
      color = "maroon",
      icon = icon("venus-mars"),
      footer = input$select_1[1],
      gradient = T
    )
  })
output$vbox1.2 <- renderValueBox({
    valueBox(
      value = format(round(razao_sexo2(),2) ,  big.mark   = '.',decimal.mark = ',') ,
      subtitle = "Mulheres p/ cada 100 homens

",
      color = "maroon",
      icon = icon("venus-mars"),
      footer = input$select_1[2],
      gradient = T
    )
  })

## Pizza sexo --------------------------------------------------------------

output$pizza_1.1 <- renderEcharts4r({
  df_sexo |> 
    filter(NM_BAIRRO == input$select_1[1]) |> 
    summarise(Qtd=sum(Qtd)) |> 
    e_charts(Sexo,reorder = F) |> 
    e_pie(Qtd, roseType = "radius", clockwise=F,   radius = c("5%", "65%"),
          label = list(color='black',show = T,formatter = "{b} \n {d}%"),
          emphasis = list(
            label = list( 
              show = T,
              fontSize = 20,
              fontWeight = "bold"))) |>
    e_tooltip() |> 
    e_legend(show=F) |> 
    e_color(c("#2ec7c9", "#b6a2de"))|> 
    e_title(text=input$select_1[1])      }) 
  
output$pizza_1.2 <- renderEcharts4r({
    
    if( !is.na(input$select_1[2])  ){
      
      df_sexo |> 
        filter(NM_BAIRRO == input$select_1[2]) |> 
        summarise(Qtd=sum(Qtd)) |> 
        e_charts(Sexo,reorder = F) |> 
        e_pie(Qtd, roseType = "radius", clockwise=F,   radius = c("5%", "65%"),
              label = list(color='black',show = T,formatter = "{b} \n {d}%"),
              emphasis = list(
                label = list(
                  show = T,
                  fontSize = 20,
                  fontWeight = "bold"))) |>
        e_tooltip() |> 
        e_legend(show=F) |> 
        e_color(c("#2ec7c9", "#b6a2de"))|> 
        e_title(text=input$select_1[2])    
    }
  })
 
## Piramide --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

observeEvent(input$select_1 ,{
   if(length(input$select_1)==3)  { 
   
updateSelectizeInput(session = getDefaultReactiveDomain(),
                     inputId = "select_1",
                     selected = input$select_1[2:3] )
  }
  },ignoreInit =T)

output$piramide_1.1 <- renderEcharts4r({
    df_faixa |> 
      filter(NM_BAIRRO == input$select_1[1]) |> 
      e_charts(x=grupo_de_idade) |> 
      e_bar(Homens,stack = "grp2",bind=perc_masc,name='Homens',
            label=list(fontSize =14,formatter=  htmlwidgets::JS("
       function (params) {
        return Math.abs(params.name)+'%';}"),
                       show= T,position= "left",fontWeight= "bold"#,color='green'#
            )
      ) |> 
      e_bar(Mulheres,stack = "grp2",bind=perc_fem,name='Mulheres',
            label=list(fontSize =14,formatter=  htmlwidgets::JS("
       function (params) {
        return Math.abs(params.name)+'%';}"),
                       show= T,position= "right",fontWeight= "bold"#,color='blue'#
            )
      ) |> 
      e_flip_coords() |> 
      e_y_axis(offset=30) |> 
      e_x_axis(#max=117799,
        #min=-127799,
        type= 'value',
        show= F,
        axisLabel=list(
          formatter= htmlwidgets::JS("function(params) {
               return Math.abs(params);
             }")
        )
      ) |>
      e_grid(left='20%') |> 
      e_theme('macarons') |> 
      e_legend( top= "3%") |> 
    e_title(text=input$select_1[1])#,subtext="Segundo sexo e grupo de idade" )  
  })  
output$piramide_1.2 <- renderEcharts4r({
    df_faixa |> 
    filter(NM_BAIRRO == input$select_1[2]) |> 
    e_charts(x=grupo_de_idade) |> 
    e_bar(Homens,stack = "grp2",bind=perc_masc,name='Homens',
          label=list(fontSize =14,formatter=  htmlwidgets::JS("
       function (params) {
        return Math.abs(params.name)+'%';}"),
                     show= T,position= "left",fontWeight= "bold"#,color='green'#
          )
    ) |> 
    e_bar(Mulheres,stack = "grp2",bind=perc_fem,name='Mulheres',
          label=list(fontSize =14,formatter=  htmlwidgets::JS("
       function (params) {
        return Math.abs(params.name)+'%';}"),
                     show= T,position= "right",fontWeight= "bold"#,color='blue'#
          )
    ) |> 
    e_flip_coords() |> 
    e_y_axis(offset=30) |> 
    e_x_axis(#max=117799,
      #min=-127799,
      type= 'value',
      show= F,
      axisLabel=list(
        formatter= htmlwidgets::JS("function(params) {
               return Math.abs(params);
             }")
      )
    ) |>
    e_grid(left='20%') |> 
    e_theme('macarons') |> 
    e_legend( top= "3%")|> 
    e_title(text=input$select_1[2])#,subtext="Segundo sexo e grupo de idade" )  
})  
output$piramide_2 <- renderEcharts4r({
  df_faixa |> 
    filter(NM_BAIRRO == input$select_1[1]) |> 
    e_charts(x=grupo_de_idade) |> 
    e_bar(Homens,stack = "grp2",bind=perc_masc,name='Homens',
          label=list(fontSize =14,formatter=  htmlwidgets::JS("
       function (params) {
        return Math.abs(params.name)+'%';}"),
                     show= T,position= "left",fontWeight= "bold"#,color='green'#
          )
    ) |> 
    e_bar(Mulheres,stack = "grp2",bind=perc_fem,name='Mulheres',
          label=list(fontSize =14,formatter=  htmlwidgets::JS("
       function (params) {
        return Math.abs(params.name)+'%';}"),
                     show= T,position= "right",fontWeight= "bold"#,color='blue'#
          )
    ) |> 
    e_flip_coords() |> 
    e_y_axis(offset=30) |> 
    e_x_axis(#max=117799,
      #min=-127799,
      type= 'value',
      show= F,
      axisLabel=list(
        formatter= htmlwidgets::JS("function(params) {
               return Math.abs(params);
             }")
      )
    ) |>
    e_grid(left='20%') |> 
    e_theme('macarons') |> 
    e_legend( top= "3%") |> 
    e_title(text=input$select_1[1])#,subtext="Segundo sexo e grupo de idade" )  
})  




# Barras cor

output$raca1 <- renderEcharts4r({
df_cor_ |> 
  filter(NM_BAIRRO==input$select_1[1]) |> 
  group_by(Sexo) |> 
  e_chart(x=Cor_raça,name='Moradores') |> 
  e_bar(Qtd) |> 
  e_color(c("#b6a2de","#2ec7c9" )) |> 
  e_toolbox(iconStyle= list(
    color= "rgba(35, 210, 32, 1)"
  )) |>
    e_tooltip(trigger="item", formatter =
                htmlwidgets::JS(
                  "function(p) {
          v = Intl.NumberFormat('pt-BR', { style: 'decimal'}).format(p.value[1]);
          return('<strong>' + p.seriesName + '</strong>' +
          '<br>Moradores: ' + Intl.NumberFormat('pt-BR', { style: 'decimal'}).format(p.value[1]) +
          '<br>Raça_cor: ' +p.value[0]  );
          }"),
              textStyle=list(fontFamily="arial", fontSize=12)
              
    )|>  
    e_legend( orient= "vertical",
                   right= 0) |> 
    e_y_axis(show=F) |> 
    e_grid(top = "-5%") |> 
    e_group("decomp") 
})

output$raca2 <- renderEcharts4r({
  df_cor_ |> 
    filter(NM_BAIRRO==input$select_1[2]) |> 
    group_by(Sexo) |> 
    e_chart(x=Cor_raça,name='Moradores') |> 
    e_bar(Qtd) |> 
    e_color(c("#b6a2de","#2ec7c9" )) |> 
    e_toolbox(iconStyle= list(
      color= "rgba(35, 210, 32, 1)"
    )) |>
    e_tooltip(trigger="item", formatter =
                htmlwidgets::JS(
                  "function(p) {
          v = Intl.NumberFormat('pt-BR', { style: 'decimal'}).format(p.value[1]);
          return('<strong>' + p.seriesName + '</strong>' +
          '<br>Moradores: ' + Intl.NumberFormat('pt-BR', { style: 'decimal'}).format(p.value[1]) +
          '<br>Raça_cor: ' +p.value[0]  );
          }"),
              textStyle=list(fontFamily="arial", fontSize=12)
              
    )|>  
    e_legend( orient= "vertical",
              right= 0) |> 
    e_y_axis(show=F) |> 
    e_grid(top = "-5%")|>
    e_group("decomp") |> 
    e_connect_group("decomp")
})

## Mapa demografia ---------------------------------------------------------

output$map_bairro <-  renderLeaflet({
  leaflet() |>
    setMapWidgetStyle(list(background = "white"))  |> 
    addProviderTiles(providers$CartoDB.PositronNoLabels, group = "CartoDB.PositronNoLabels")|> 
    addLayersControl(
      overlayGroups = c(
        "Bairros",
        'id_final')) |>
    addScaleBar(position = "bottomright",
                options = scaleBarOptions(imperial = F))  |>
    setView(-38.52782, -3.785804, zoom = 11) |>
    addFullscreenControl(pseudoFullscreen = T)
}) 

output$table_bairro <- renderReactable({
  
  
  areaB <- round(sum(shp_Bairros$Área_km2),2)      
  pessoB <- sum(shp_Bairros$Pessoas)   
  domiB <- sum(shp_Bairros$Domicílios)   
  densB <-round( sum(shp_Bairros$Pessoas)/sum(shp_Bairros$Área_km2) )
  medB <- round(sum(shp_Bairros$Pessoas)/sum(shp_Bairros$Domicílios),2)
  razB <- round(sum(shp_Bairros$V01008)/sum(shp_Bairros$V01007)*100,2)
  percB <- round(sum(shp_Bairros$V01008)/sum(shp_Bairros$V01006)*100,2)
  mulB <- round(sum(bairros_demografia[bairros_demografia$NM_BAIRRO=="FORTALEZA",'V01008']),2)
  
  shp_Bairros <-   shp_Bairros |>
    st_drop_geometry() |> 
    select(-x,-y,-V01006:-V01007,-CD_BAIRRO,-Média_moradores) |> 
    mutate(Densidade=round(Densidade),
           Área_km2=round(Área_km2,2),
          # Média_moradores=round(Média_moradores,2),
           Razão=round(Razão,2))
  
  
  reactable(shp_Bairros[,c(1,6,3,7,8,4,5,2)],
            bordered = TRUE,compact = TRUE,defaultPageSize = 15,
            highlight = TRUE, searchable = TRUE,defaultColDef = colDef(#headerClass = "sort-header",
              footerStyle = list(fontWeight = "bold",align = "right")),
            columns = list(
              Bairro = colDef(name = "Bairro",footer='Geral', style = list(fontFamily = "monospace"
                                                                           # whiteSpace = "pre",fontSize = "1.5rem"
              )),
              Área_km2 = colDef(name = "Área km2", footer=format(areaB,big.mark = ".",decimal.mark=","), 
                                align = "right", cell = function(value) {
                                  width <- paste0(value / max(shp_Bairros$Área_km2) * 100, "%")
                                  value <- format(value,big.mark = ".",decimal.mark=",")
                                }, style = list(fontFamily = "monospace", whiteSpace = "pre")),
              Pessoas = colDef( align = "left", footer=format(pessoB,big.mark = ".",decimal.mark=","), 
                                cell = function(value) {
                                  width <- paste0(value / max(shp_Bairros$Pessoas) * 100, "%")
                                  value <- format(value,big.mark = ".",decimal.mark=",")
                                  value <- format(value, width = 7, justify = "right")
                                  bar_chart(value, width = width,background = "#e1e1e1")
                                }, style = list(fontFamily = "monospace", whiteSpace = "pre")),
              Razão = colDef(name = "Razão de sexo", align = "left", footer=format(razB,big.mark = ".",decimal.mark=","), 
                                cell = function(value) {
                                  width <- paste0(value / max(shp_Bairros$Razão) * 100,"%")
                                  value <- format(value,big.mark = ".",decimal.mark=",")
                                  value <- format(value, width = 7, justify = "right")
                                  bar_chart(value, width = width,fill = "#720072",background = "#e1e1e1")
                                }, style = list(fontFamily = "monospace", whiteSpace = "pre")),
              Percentual = colDef(name='Percentual',  align = "left", footer=format(percB,big.mark = ".",decimal.mark=","), 
                              cell = function(value) {
                                width <- paste0(value / max(shp_Bairros$Percentual) * 100,"%")
                                value <- format(value,big.mark = ".",decimal.mark=",")
                                value <- format(value, width = 7, justify = "right")
                                bar_chart(value, width = width,fill = "pink",background = "#e1e1e1")
                              }, style = list(fontFamily = "monospace", whiteSpace = "pre")),
              Domicílios = colDef( align = "left",footer=format(domiB,big.mark = ".",decimal.mark=","), 
                                   cell = function(value) {
                                     width <- paste0(value / max(shp_Bairros$Domicílios) * 100, "%")
                                     value <- format(value,big.mark = ".",decimal.mark=",")
                                     value <- format(value, width = 7, justify = "right")
                                     bar_chart(value, width = width, fill = "#fc5185", background = "#e1e1e1")
                                   }, style = list(fontFamily = "monospace", whiteSpace = "pre")),
              Densidade = colDef( align = "left",footer=format(densB,big.mark = ".",decimal.mark=","), 
                                  cell = function(value) {
                                    width <- paste0(value / max(shp_Bairros$Densidade) * 100, "%")
                                    value <- format(value,big.mark = ".",decimal.mark=",")
                                    value <- format(value, width = 7, justify = "right")
                                    bar_chart(value, width = width, fill = "#245", background = "#e1e1e1")
                                  }, style = list(fontFamily = "monospace", whiteSpace = "pre")),
              V01008 = colDef(name = "Mulheres",  align = "left", footer=format(mulB,big.mark = ".",decimal.mark=","), 
                              cell = function(value) {
                                width <- paste0(value / max(shp_Bairros$V01008) * 100,"%")
                                value <- format(value,big.mark = ".",decimal.mark=",")
                                value <- format(value, width = 7, justify = "right")
                                bar_chart(value, width = width,fill = "#E016AB",background = "#e1e1e1")
                              }, style = list(fontFamily = "monospace", whiteSpace = "pre"))
            )
  )
  
  
})

observeEvent(req(input$current_tab=='Demografia'), {
  
  leafletProxy('map_bairro') |>
    addPolygons(data=shp_Bairros,
                weight=.6,
                fillColor=~pal_perc_ba(shp_Bairros$Percentual),
                color = 'purple',
                opacity = 1,
                group = 'id_final',
                popup =  popupTable(bairro_pop_,zcol = c("Bairro", "Pessoas",
                                                         "Percentual"),
                                    feature.id = FALSE,
                                    row.numbers = FALSE),
                dashArray = "0",
                fillOpacity =1 ,
                label = ~Bairro,
                highlightOptions=highlightOptions(
                  color = "#500050", weight = 3, bringToFront = F)
    ) |>
    addLegend(data = shp_Bairros ,"bottomright", pal = pal_perc_ba, values = ~Percentual,
              title = "% mulheres",
              opacity = 1
    )
  
},once=T)
# 
{ # aux
  pal_ba <- colorNumeric(
    palette ='YlGnBu',# "YlGnBu",
    domain = shp_Bairros$Pessoas
  )
  
  pal_dens_ba<- colorNumeric(
    palette ='YlOrBr', #"",
    domain = shp_Bairros$Densidade
  )
  
  pal_perc_ba<- colorNumeric(
    palette = 'BuPu',
    domain = shp_Bairros$Percentual
  )

  pal_razao_ba<- colorNumeric(
    palette = "RdPu",
    domain = shp_Bairros$Razão
  )

  
  bairro_pop_ <- st_drop_geometry(shp_Bairros) |>
    mutate(Pessoas = format(Pessoas, big.mark = ".", decimal.mark = ","),
           Domicílios = format(Domicílios, big.mark = ".", decimal.mark = ","),
           Densidade = format(Densidade, big.mark = ".", decimal.mark = ","),
           Área_km2 = format(Área_km2, big.mark = ".", decimal.mark = ","),

    )
  
  # sca_ba <- colourScale(shp_Bairros$Densidade, breaks=6,
  #                       style="quantile",dec=1,revCol=F)
  # 
  # colorpal_dens_ba <- colorBin("YlOrBr", shp_Bairros$Densidade, bins = sca_ba$breaks)
  # 
  # 
  
  
} # Aux mapa

observeEvent(req(input$tabs_ba),{ 
  
  
  leafletProxy("map_bairro" )  |> 
    clearGroup(c('id_final')) |> 
    clearControls() 
  
  if(input$tabs_ba == '% de mulheres' )
  {
    
    
    leafletProxy('map_bairro') |>
      addPolygons(data=shp_Bairros,
                  weight=.6,
                  fillColor=~pal_perc_ba(shp_Bairros$Percentual),
                  color = 'purple',
                  opacity = 1,
                  group = 'id_final',
                  popup =  popupTable(bairro_pop_,zcol = c("Bairro", "Pessoas",
                                                           "Percentual"),
                                      feature.id = FALSE,
                                      row.numbers = FALSE),
                  dashArray = "0",
                  fillOpacity =1 ,
                  label = ~Bairro,
                  highlightOptions=highlightOptions(
                    color = "#500050", weight = 3, bringToFront = F)
      ) |>
      addLegend(data = shp_Bairros,"bottomright", pal = pal_perc_ba, values = ~Percentual,
                title = "% Mulheres",
                opacity = 1
      )
  }
  
  if(input$tabs_ba == 'Razão sexo' )
  {
    
    
    leafletProxy('map_bairro') |>
      addPolygons(data=shp_Bairros,
                  weight=.6,
                  fillColor=~pal_razao_ba(shp_Bairros$Razão),
                  color = 'purple',
                  opacity = 1,
                  group = 'id_final',
                  popup =  popupTable(bairro_pop_,zcol = c("Bairro", "Pessoas",
                                                           "Razão"),
                                      feature.id = FALSE,
                                      row.numbers = FALSE),
                  dashArray = "0",
                  fillOpacity =1 ,
                  label = ~Bairro,
                  highlightOptions=highlightOptions(
                    color = "#500050", weight = 3, bringToFront = F)
      ) |>
      addLegend(data = shp_Bairros,"bottomright", pal = pal_razao_ba, values = ~Razão,
                title = "Razão sexo",
                opacity = 1
      )
  }
  
  if(input$tabs_ba == 'População' )
  {
    
    
    leafletProxy('map_bairro') |>
      addPolygons(data=shp_Bairros,
                  weight=.6,
                  fillColor=~pal_ba(shp_Bairros$Pessoas),
                  color = 'purple',
                  opacity = 1,
                  group = 'id_final',
                  popup =  popupTable(bairro_pop_,zcol = c("Bairro", "Pessoas",
                                                           "Domicílios"
                                                           ),
                                      feature.id = FALSE,
                                      row.numbers = FALSE),
                  dashArray = "0",
                  fillOpacity =1 ,
                  label = ~Bairro,
                  highlightOptions=highlightOptions(
                    color = "#500050", weight = 3, bringToFront = F)
      ) |>
      addLegend(data = shp_Bairros,"bottomright", pal = pal_ba, values = ~Pessoas,
                title = "População",
                opacity = 1
      )
  }
  
  
  if(input$tabs_ba == 'Densidade' )
  {
    
    leafletProxy('map_bairro') |>
      addPolygons(data=shp_Bairros ,
                  weight=.6,
                  # fillColor=~colorpal_dens_ba(shp_Bairros$Densidade),
                  fillColor=~pal_dens_ba(shp_Bairros$Densidade),
                  color = 'purple',
                  opacity = 1,
                  group = 'id_final',
                  popup =  popupTable(bairro_pop_,zcol = c("Bairro", "Pessoas",
                                                           "Densidade",
                                                           "Área_km2"),
                                      feature.id = FALSE,
                                      row.numbers = FALSE),
                  dashArray = "0",
                  fillOpacity =1 ,
                  label = ~Bairro,
                  highlightOptions=highlightOptions(
                    color = "#500050", weight = 3, bringToFront = F)
      ) |>
      addLegend(data = shp_Bairros,position ="bottomright", pal = pal_dens_ba,
                values = ~Densidade,
                labFormat = my_labelFormat(
                  big.mark='.',
                  digits=0),
                title = "Densidade",
                opacity = 1
      )
    
    
  }
  
},ignoreInit = T) 



















# Server mercado ----------------------------------------------------------

output$pedro <- renderhtml({'<div class="flourish-embed flourish-hierarchy" data-src="visualisation/21354009"><script src="https://public.flourish.studio/resources/embed.js"></script><noscript><img src="https://public.flourish.studio/visualisation/21354009/thumbnail" width="100%" alt="hierarchy visualization" /></noscript></div>' })
render
## reativos mercados -------------------------------------------------------



Tipos_trab2_ano <- reactive({
  Tipos_trab2[Tipos_trab2$Ano %in% input$Ano_filter,] 
})

Filtro_Tipos_trab <- { select_group_server(
  id = "Filtro_merc",
  data_r = Tipos_trab2_ano,
  vars_r = reactive(c('V2007', 'V2010','VD3004','Composição'))
)}


Tipos_trab_Cnae <- reactive( aggregate(Qtd.~ Ano+Tipo+Denominação+Denom_Seção+Denom_Divisão,
                                       Filtro_Tipos_trab(),sum))



## treemap -----------------------------------------------------------------
# output$F_cnaes <- renderD3plus({
#   
#   
#   Tipos_trab_Cnae_G <-aggregate(Qtd.~ Ano+Denominação+Denom_Seção+Denom_Divisão,
#                                 Tipos_trab_Cnae(),sum) 
#   
#   
#   d3plus(
#     data = if(nrow(Tipos_trab_Cnae_G)==0) {
#       data.frame(Qtd.= NaN)
#     } else {
#       Tipos_trab_Cnae_G 
#     },
#     type = "tree_map",
#     id = c("Denom_Seção", "Denominação"), #,"Denominação" Denom_Divisão
#     locale = "pt_BR",
#     width = "100%",
#     currency = "",
#     number_text = c("Mil", "Milhão", "Milhões", "Bilhão", "Bilhões"),
#     height = 500)  |> 
#     d3plusSize("Qtd.") |> 
#     # d3plusUi(list( list(method = "depth", type = "drop",
#     #                     value = list(list('1ª Seção' = 0), list('2ª Divisão' = 1)))))  |>  #,list('3ª Denominação' = 2)
#     # 
#     d3plusColor("Denom_Seção")  |> 
#     d3plusDepth(0) |> 
#     d3plusLabels(value = TRUE, valign = "top")  |> 
#     d3plusTitle(value = paste0('Geral ', input$Ano_filter), font = list(size = 22, weight = 900),
#                 total = list(value = list(prefix = "Total: "),
#                              font = list(size = 16, weight = 900))) 
#   
#   
# })
output$F_cnaes_form <- renderD3plus({


  d3plus(
    data = if(nrow(Tipos_trab_Cnae()[Tipos_trab_Cnae()$Tipo=="Trabalho formal",])==0) {
      data.frame(Qtd.= NaN)
    } else {
      Tipos_trab_Cnae()[Tipos_trab_Cnae()$Tipo=="Trabalho formal",]
    },
    type = "tree_map",
    id = c("Denom_Seção", "Denom_Divisão"),
    locale = "pt_BR",
    width = "100%",
    currency = "",
    number_text = c("Mil", "Milhão", "Milhões", "Bilhão", "Bilhões"),
    height = 500)  |> 
    d3plusSize("Qtd.")  |> 
    d3plusUi(list( list(method = "depth", type = "drop",
                        value = list(list('1ª Seção' = 0), list('2ª Divisão' = 1)))))  |> 

    d3plusColor("Denom_Seção")  |> 
    d3plusDepth(0) |> 
    d3plusLabels(value = TRUE, valign = "top")  |> 
    d3plusTitle(value = paste0('Formal ', input$Ano_filter), font = list(size = 22, weight = 900),
                total = list(value = list(prefix = "Total: "),
                             font = list(size = 16, weight = 900)))


})
output$F_cnaes_inform <- renderD3plus({
  req(Filtro_Tipos_trab())


  d3plus(
    data = if(nrow(Tipos_trab_Cnae()[Tipos_trab_Cnae()$Tipo=="Trabalho informal",])==0) {
      data.frame(Qtd.= NaN)
    } else {
      Tipos_trab_Cnae()[Tipos_trab_Cnae()$Tipo=="Trabalho informal",]
    },
    type = "tree_map",
    id = c("Denom_Seção", "Denom_Divisão"),
    locale = "pt_BR",
    width = "100%",
    currency = "",
    number_text = c("Mil", "Milhão", "Milhões", "Bilhão", "Bilhões"),
    height = 500) |> 
    d3plusSize("Qtd.") |> 
    d3plusUi(list( list(method = "depth", type = "drop",
                        value = list(list('1ª Seção' = 0), list('2ª Divisão' = 1)))))  |> 

    d3plusColor("Denom_Seção") |> 
    d3plusDepth(0) |> 
    d3plusLabels(value = TRUE, valign = "top")  |> 
    d3plusTitle(value = paste0('Informal ', input$Ano_filter), font = list(size = 22, weight = 900),
                total = list(value = list(prefix = "Total: "),
                             font = list(size = 16, weight = 900)))

})


## informalidade -----------------------------------------------------------

# 
# output$perc_informal <-   renderEcharts4r({
#   
#   
#   
#   e_charts(data= pivot_wider(
#     aggregate(Qtd.~ Ano+Tipo,Tipos_trab2,sum)  |> 
#       right_join(expand.grid(Tipo=Tipo_T,Ano=Ano_T ),
#                  by=c("Ano"="Ano","Tipo"="Tipo"))   |> 
#       mutate(Qtd.=ifelse(is.na(Qtd.), 0, Qtd.)),names_from=Tipo,values_from = Qtd.,values_fill = 0) |> 
#       group_by(Ano) |> 
#       mutate(`Trabalho formal`=round(`Trabalho formal`,0),
#              `Trabalho informal`=round(`Trabalho informal`,0),
#              Total=`Trabalho formal`+`Trabalho informal`,.groups="keep")   |> 
#       ungroup() |> 
#       arrange(Ano),
#     x=Ano) |> 
#     e_bar(`Trabalho formal`,stack="grp")  |> 
#     e_bar(`Trabalho informal`,stack="grp") |> 
#     e_toolbox() |> 
#     e_toolbox_feature('dataZoom')  |> 
#     e_toolbox_feature('dataView') |> 
#     e_toolbox_feature('saveAsImage')  |> 
#     e_toolbox_feature('restore') |> 
#     e_tooltip() |> 
#     e_effect_scatter(Total,symbol_size = 6,smooth=T,color= 'red') |> 
#     e_legend(show=T,orient = 'horizontal', bottom = 0) |> 
#     e_line(Total,smooth=T,color= '#ee6666')
#   
#   
# })
# output$perc_informal_sexo <-   renderEcharts4r({
#   
#   
#   e_charts(data =  pivot_wider( aggregate(Qtd.~ Ano+Tipo+V2007,Tipos_trab2,sum)  |> 
#                                   right_join(expand.grid(Tipo=Tipo_T,Ano=Ano_T,V2007=Sexo_T),
#                                              by=c("Ano"="Ano","Tipo"="Tipo","V2007"="V2007"))   |> 
#                                   mutate(Qtd.=ifelse(is.na(Qtd.), 0, Qtd.)),names_from=Tipo,values_from = Qtd.,values_fill = 0) |> 
#              group_by(Ano,V2007) |> 
#              summarise(Informalidade=`Trabalho informal`/(`Trabalho formal`+`Trabalho informal`),.groups="keep") |> 
#              ungroup() |>
#              mutate(V2007=fct_reorder(V2007,Informalidade))  |>
#              group_by(V2007)
#            ,
#            x=Ano) |> 
#     e_line(Informalidade,smooth=T,
#            emphasis=list( focus= 'series' ))  |> 
#     e_y_axis(formatter = e_axis_formatter("percent", digits = 0))  |> 
#     e_toolbox() |> 
#     e_toolbox_feature(feature='magicType', type=list('line', 'bar'))  |> 
#     e_toolbox_feature('dataZoom') |> 
#     e_toolbox_feature('dataView') |> 
#     e_toolbox_feature('saveAsImage')  |> 
#     e_toolbox_feature('restore') |> 
#     e_legend(show=T,orient = 'horizontal', bottom = 0,emphasis= list( focus= 'series'))  |> 
#     e_tooltip(trigger= 'axis',
#               axisPointer=list(
#                 type= 'shadow'
#               ),formatter = e_tooltip_item_formatter(
#                 style = c( "percent"))) |> 
#     e_data(data=
#              pivot_wider(
#                aggregate(Qtd.~ Ano+Tipo,Tipos_trab2,sum) |> 
#                  right_join(expand.grid(Tipo=Tipo_T,Ano=Ano_T ),
#                             by=c("Ano"="Ano","Tipo"="Tipo"))   |> 
#                  mutate(Qtd.=ifelse(is.na(Qtd.), 0, Qtd.)),names_from=Tipo,values_from = Qtd.,values_fill = 0) |> 
#              group_by(Ano) |> 
#              summarise(Geral=`Trabalho informal`/(`Trabalho formal`+`Trabalho informal`),.groups="keep")  |> 
#              ungroup()
#            ,x= Ano    ) |> 
#     e_effect_scatter(Geral,symbol_size = 6,smooth=T,color= 'red') |> 
#     e_line(Geral,smooth=T,color= '#ee6666')
#   
# })



}
